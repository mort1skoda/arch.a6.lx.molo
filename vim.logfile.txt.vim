XSMP opening connectionVim: Warning: Output is not to a terminal

chdir(/etc)[?25l[J
fchdir() to previous dir[J
sourcing "/etc/vimrc"[J
line 1: echo "in /etc/vimrc"[J

in /etc/vimrc[J
line 2: [J

line 3: " All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just[J

line 4: " /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime[J

line 5: " you can find below.  If you wish to change any of those settings, you should[J

line 6: " do it in this file (/etc/vimrc), since archlinux.vim will be overwritten[J

line 7: " everytime an upgrade of the vim packages is performed.  It is recommended to[J

line 8: " make changes after sourcing archlinux.vim since it alters the value of the[J

line 9: " 'compatible' option.[J

line 10: [J

line 11: " This line should not be removed as it ensures that various options are[J

line 12: " properly set to work with the Vim-related packages.[J

line 13: runtime! archlinux.vim[J

Searching for "archlinux.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/archlinux.vim"[J
Searching for "/usr/share/vim/vimfiles/archlinux.vim"[J
chdir(/usr/share/vim/vimfiles)[J
fchdir() to previous dir[J
line 13: sourcing "/usr/share/vim/vimfiles/archlinux.vim"[J
line 1: echom"in /usr/share/vim/vimfiles/archlinux.vim"[J

in /usr/share/vim/vimfiles/archlinux.vim[J
line 2: [J

line 3: " The Arch Linux global vimrc - setting only a few sane defaults[J

line 4: "[J

line 5: " DO NOT EDIT THIS FILE. IT'S OVERWRITTEN UPON UPGRADES.[J

line 6: "[J

line 7: " Use /etc/vimrc for system-wide and $HOME/.vimrc for personal configuration[J

line 8: " (for details see ':help initialization').[J

line 9: "[J

line 10: " Use :help '<option>' to see the documentation for the given option.[J

line 11: [J

line 12: " Use Vim defaults instead of 100% vi compatibility[J

line 13: " Avoid side-effects when nocompatible has already been set.[J

line 14: if &compatible[J

line 15:   set nocompatible[J

line 16: endif[J

line 17: [J

line 18: set backspace=indent,eol,start[J

line 19: set ruler[J

line 20: set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc[J

line 21: set suffixes-=.h[J

line 22: set suffixes-=.obj[J

line 23: [J

line 24: " Move temporary files to a secure location to protect against CVE-2017-1000382[J

line 25: if exists('$XDG_CACHE_HOME')[J

line 26:   let &g:directory=$XDG_CACHE_HOME[J

line 27: else[J

line 28:   let &g:directory=$HOME . '/.cache'[J

line 29: endif[J

line 30: let &g:undodir=&g:directory . '/vim/undo//'[J

line 31: let &g:backupdir=&g:directory . '/vim/backup//'[J

line 32: let &g:directory.='/vim/swap//'[J

line 33: " Create directories if they doesn't exist[J

line 34: if ! isdirectory(expand(&g:directory))[J

line 35:   silent! call mkdir(expand(&g:directory), 'p', 0700)[J

line 36: endif[J

line 37: if ! isdirectory(expand(&g:backupdir))[J

line 38:   silent! call mkdir(expand(&g:backupdir), 'p', 0700)[J

line 39: endif[J

line 40: if ! isdirectory(expand(&g:undodir))[J

line 41:   silent! call mkdir(expand(&g:undodir), 'p', 0700)[J

line 42: endif[J

line 43: [J

line 44: " Make shift-insert work like in Xterm[J

line 45: if has('gui_running')[J

line 46:   map <S-Insert> <MiddleMouse>[J

line 47:   map! <S-Insert> <MiddleMouse>[J

line 48: endif[J

finished sourcing /usr/share/vim/vimfiles/archlinux.vim[J
continuing in /etc/vimrc[J
Searching for "/usr/share/vim/vim90/archlinux.vim"[J
Searching for "/usr/share/vim/vimfiles/after/archlinux.vim"[J
Searching for "/home/m/.vim/after/archlinux.vim"[J
line 14: [J

line 15: " If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'[J

line 16: " Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual[J

line 17: " and configure vim to your own liking![J

line 18: [J

line 19: " do not load defaults if ~/.vimrc is missing[J

line 20: "let skip_defaults_vim=1[J

finished sourcing /etc/vimrc[J
chdir(/home/m)[J
fchdir() to previous dir[J
sourcing "$HOME/.vimrc"[J
line 1: let mapleader = ","[J

line 2: set hidden[J

line 3: [J

line 4: "--- info --------------------------------------------{{{[J

line 5: "---    ~/.vimrc    ----[J

line 6: "-----------------------[J

line 7: " Author: Morten HÃ¥kestad <mort1skoda@gmail.com>[J

line 8: [J

line 9: [J

line 10: "--- tips and tricks and debug --------------------[J

line 11: echom"in /home/m/.vimrc"[J

in /home/m/.vimrc[J
line 12: " see dbgvim alias in .bash_aliases[J

line 13: [J

line 14: " visual select text and use u to lower[J

line 15: " and S-u = U to upper case.[J

line 16: "--------------------------------------------------------}}}[J

line 17: [J

line 18: [J

line 19: "--- file managers ------------------------------------{{{[J

line 20: " Use lf to select and open file(s) in vim (adapted from ranger).[J

line 21: " You need to either copy the content of this file to your ~/.vimrc or source[J

line 22: " this file directly:[J

line 23: "[J

line 24: let lfvim = "/usr/share/vim/vimfiles/ftdetect/lf.vim"[J

line 25: if filereadable(lfvim)[J

line 26:     "exec "source " . lfvim[J

line 27: endif[J

line 28: [J

line 29: " You may also like to assign a key to this command:[J

line 30: nnoremap <leader>lf :LF<cr>[J

line 31: [J

line 32: " open vim integrated file explorer[J

line 33: nnoremap <Leader>vf :Lexplore<CR>7<C-w><[J

line 34: [J

line 35: " can you open vifm also?[J

line 36: "--------------------------------------}}}[J

line 37: [J

line 38: [J

line 39: "--- folds -------------------{{{[J

line 40: setlocal foldmethod=marker[J

line 41: " ff = toogle one folder[J

line 42: nnoremap ff za[J

line 43: " fc = folder close all[J

line 44: nnoremap fc zm[J

line 45: " fo = folder open all[J

line 46: nnoremap fo zr[J

line 47: "-----------------------------}}}[J

line 48: [J

line 49: [J

line 50: "--- set colorscheme ---------------------------{{{[J

line 51: colorscheme molokai[J

Searching for "colors/lists/default.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/colors/lists/default.vim"[J
Searching for "/usr/share/vim/vimfiles/colors/lists/default.vim"[J
Searching for "/usr/share/vim/vim90/colors/lists/default.vim"[J
chdir(/usr/share/vim/vim90/colors/lists)[J
fchdir() to previous dir[J
line 51: sourcing "/usr/share/vim/vim90/colors/lists/default.vim"[J
line 1: " Maintainer:  Drew Vogel <dvogel@sidejump.org>[J

line 2: " Last Change: 2022 Mar 20[J

line 3: "[J

line 4: " Replaced rgb.txt as the source of de facto standard color names. This is[J

line 5: " sourced each time the colorscheme command is run. It is also sourced each[J

line 6: " time the highlight command fails to recognize a gui color. You can override[J

line 7: " these colors by introducing a new colors/lists/default.vim file earlier in[J

line 8: " the runtimepath.[J

line 9: [J

line 10: let s:keepcpo= &cpo[J

line 11: set cpo&vim[J

line 12: [J

line 13: call extend(v:colornames, { 'snow': '#fffafa', 'ghost white': '#f8f8ff', 'ghostwhite': '#f8f8ff', 'white smoke': '#f5f5f5', 'whitesmoke': '#f5f5f5', 'gainsboro': '#dcdcdc', 'floral white': '#fffaf0', 'floralwhite': '#fffaf0', 'old lace': '#fdf5e6', 'oldlace': '#fdf5e6', 'linen': '#faf0e6', 'antique white': '#faebd7', 'antiquewhite': '#faebd7', 'papaya whip': '#ffefd5', 'papayawhip': '#ffefd5', 'blanched almond': '#ffebcd', 'blanchedalmond': '#ffebcd', 'bisque': '#ffe4c4', 'peach puff': '#ffdab9', 'peachpuff': '#ffdab9', 'navajo white': '#ffdead', 'navajowhite': '#ffdead', 'moccasin': '#ffe4b5', 'cornsilk': '#fff8dc', 'ivory': '#fffff0', 'lemon chiffon': '#fffacd', 'lemonchiffon': '#fffacd', 'seashell': '#fff5ee', 'honeydew': '#f0fff0', 'mint cream': '#f5fffa', 'mintcream': '#f5fffa', 'azure': '#f0ffff', 'alice blue': '#f0f8ff', 'aliceblue': '#f0f8ff', 'lavender': '#e6e6fa', 'lavender blush': '#fff0f5', 'lavenderblush': '#fff0f5', 'misty rose': '#ffe4e1', 'mistyrose': '#ffe4e1', 'white': '#ffffff', 'b[J

line 803: [J

line 804: let &cpo= s:keepcpo[J

line 805: unlet s:keepcpo[J

line 806: [J

line 807: "vim: sw=4[J

finished sourcing /usr/share/vim/vim90/colors/lists/default.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/colors/lists/default.vim"[J
Searching for "/home/m/.vim/after/colors/lists/default.vim"[J
Searching for "colors/molokai.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/colors/molokai.vim"[J
chdir(/home/m/.vim/colors)[J
fchdir() to previous dir[J
line 51: sourcing "/home/m/.vim/colors/molokai.vim"[J
line 1: " Vim color file[J

line 2: "[J

line 3: " Author: Tomas Restrepo <tomas@winterdom.com>[J

line 4: " https://github.com/tomasr/molokai[J

line 5: "[J

line 6: " Note: Based on the Monokai theme for TextMate[J

line 7: " by Wimer Hazenberg and its darker variant[J

line 8: " by Hamish Stuart Macpherson[J

line 9: "[J

line 10: [J

line 11: hi clear[J

line 12: [J

line 13: if version > 580[J

line 14:     " no guarantees for version 5.8 and below, but this makes it stop[J

line 15:     " complaining[J

line 16:     hi clear[J

line 17:     if exists("syntax_on")[J

line 18:         syntax reset[J

line 19:     endif[J

line 20: endif[J

line 21: let g:colors_name="molokai"[J

line 22: [J

line 23: if exists("g:molokai_original")[J

line 24:     let s:molokai_original = g:molokai_original[J

line 25: else[J

line 26:     let s:molokai_original = 0[J

line 27: endif[J

line 28: [J

line 29: [J

line 30: hi Boolean         guifg=#AE81FF[J

line 31: hi Character       guifg=#E6DB74[J

line 32: hi Number          guifg=#AE81FF[J

line 33: hi String          guifg=#E6DB74[J

line 34: hi Conditional     guifg=#F92672               gui=bold[J

line 35: hi Constant        guifg=#AE81FF               gui=bold[J

line 36: hi Cursor          guifg=#000000 guibg=#F8F8F0[J

line 37: hi iCursor         guifg=#000000 guibg=#F8F8F0[J

line 38: hi Debug           guifg=#BCA3A3               gui=bold[J

line 39: hi Define          guifg=#66D9EF[J

line 40: hi Delimiter       guifg=#8F8F8F[J

line 41: hi DiffAdd                       guibg=#13354A[J

line 42: hi DiffChange      guifg=#89807D guibg=#4C4745[J

line 43: hi DiffDelete      guifg=#960050 guibg=#1E0010[J

line 44: hi DiffText                      guibg=#4C4745 gui=italic,bold[J

line 45: [J

line 46: hi Directory       guifg=#A6E22E               gui=bold[J

line 47: hi Error           guifg=#E6DB74 guibg=#1E0010[J

line 48: hi ErrorMsg        guifg=#F92672 guibg=#232526 gui=bold[J

line 49: hi Exception       guifg=#A6E22E               gui=bold[J

line 50: hi Float           guifg=#AE81FF[J

line 51: hi FoldColumn      guifg=#465457 guibg=#000000[J

line 52: hi Folded          guifg=#465457 guibg=#000000[J

line 53: hi Function        guifg=#A6E22E[J

line 54: hi Identifier      guifg=#FD971F[J

line 55: hi Ignore          guifg=#808080 guibg=bg[J

line 56: hi IncSearch       guifg=#C4BE89 guibg=#000000[J

line 57: [J

line 58: hi Keyword         guifg=#F92672               gui=bold[J

line 59: hi Label           guifg=#E6DB74               gui=none[J

line 60: hi Macro           guifg=#C4BE89               gui=italic[J

line 61: hi SpecialKey      guifg=#66D9EF               gui=italic[J

line 62: [J

line 63: hi MatchParen      guifg=#000000 guibg=#FD971F gui=bold[J

line 64: hi ModeMsg         guifg=#E6DB74[J

line 65: hi MoreMsg         guifg=#E6DB74[J

line 66: hi Operator        guifg=#F92672[J

line 67: [J

line 68: " complete menu[J

line 69: hi Pmenu           guifg=#66D9EF guibg=#000000[J

line 70: hi PmenuSel                      guibg=#808080[J

line 71: hi PmenuSbar                     guibg=#080808[J

line 72: hi PmenuThumb      guifg=#66D9EF[J

line 73: [J

line 74: hi PreCondit       guifg=#A6E22E               gui=bold[J

line 75: hi PreProc         guifg=#A6E22E[J

line 76: hi Question        guifg=#66D9EF[J

line 77: hi Repeat          guifg=#F92672               gui=bold[J

line 78: hi Search          guifg=#000000 guibg=#FFE792[J

line 79: " marks[J

line 80: hi SignColumn      guifg=#A6E22E guibg=#232526[J

line 81: hi SpecialChar     guifg=#F92672               gui=bold[J

line 82: hi SpecialComment  guifg=#7E8E91               gui=bold[J

line 83: hi Special         guifg=#66D9EF guibg=bg      gui=italic[J

line 84: if has("spell")[J

line 85:     hi SpellBad    guisp=#FF0000 gui=undercurl[J

line 86:     hi SpellCap    guisp=#7070F0 gui=undercurl[J

line 87:     hi SpellLocal  guisp=#70F0F0 gui=undercurl[J

line 88:     hi SpellRare   guisp=#FFFFFF gui=undercurl[J

line 89: endif[J

line 90: hi Statement       guifg=#F92672               gui=bold[J

line 91: hi StatusLine      guifg=#455354 guibg=fg[J

line 92: hi StatusLineNC    guifg=#808080 guibg=#080808[J

line 93: hi StorageClass    guifg=#FD971F               gui=italic[J

line 94: hi Structure       guifg=#66D9EF[J

line 95: hi Tag             guifg=#F92672               gui=italic[J

line 96: hi Title           guifg=#ef5939[J

line 97: hi Todo            guifg=#FFFFFF guibg=bg      gui=bold[J

line 98: [J

line 99: hi Typedef         guifg=#66D9EF[J

line 100: hi Type            guifg=#66D9EF               gui=none[J

line 101: hi Underlined      guifg=#808080               gui=underline[J

line 102: [J

line 103: hi VertSplit       guifg=#808080 guibg=#080808 gui=bold[J

line 104: "guibg=#403D3D[J

line 105: hi VisualNOS                     guibg=#403D3D[J

line 106: hi Visual                        guibg=#403D3D[J

line 107: [J

line 108: hi WarningMsg      guifg=#FFFFFF guibg=#333333 gui=bold[J

line 109: hi WildMenu        guifg=#66D9EF guibg=#000000[J

line 110: [J

line 111: hi TabLineFill     guifg=#1B1D1E guibg=#1B1D1E[J

line 112: hi TabLine         guibg=#1B1D1E guifg=#808080 gui=none[J

line 113: [J

line 114: if s:molokai_original == 1[J

line 115:    hi Normal          guifg=#F8F8F2 guibg=#272822[J

line 116:    hi Comment         guifg=#75715E[J

line 117:    hi CursorLine                    guibg=#3E3D32[J

line 118:    hi CursorLineNr    guifg=#FD971F               gui=none[J

line 119:    hi CursorColumn                  guibg=#3E3D32[J

line 120:    hi ColorColumn                   guibg=#3B3A32[J

line 121:    hi LineNr          guifg=#BCBCBC guibg=#3B3A32[J

line 122:    hi NonText         guifg=#75715E[J

line 123:    hi SpecialKey      guifg=#75715E[J

line 124: else[J

line 125:    hi Normal          guifg=#F8F8F2 guibg=#1B1D1E[J

line 126:    hi Comment         guifg=#7E8E91[J

line 127:    hi CursorLine                    guibg=#293739[J

line 128:    hi CursorLineNr    guifg=#FD971F               gui=none[J

line 129:    hi CursorColumn                  guibg=#293739[J

line 130:    hi ColorColumn                   guibg=#232526[J

line 131:    hi LineNr          guifg=#465457 guibg=#232526[J

line 132:    hi NonText         guifg=#465457[J

line 133:    hi SpecialKey      guifg=#465457[J

line 134: end[J

line 135: [J

line 136: "[J

line 137: " Support for 256-color terminal[J

line 138: "[J

line 139: if &t_Co > 255[J

line 140:    if s:molokai_original == 1[J

line 141:       hi Normal                   ctermbg=234[J

line 142:       hi CursorLine               ctermbg=235   cterm=none[J

line 143:       hi CursorLineNr ctermfg=208               cterm=none[J

line 144:    else[J

line 145:       hi Normal       ctermfg=252 ctermbg=233[J

line 146:       hi CursorLine               ctermbg=234   cterm=none[J

line 147:       hi CursorLineNr ctermfg=208               cterm=none[J

line 148:    endif[J

line 149:    hi Boolean         ctermfg=135[J

line 150:    hi Character       ctermfg=144[J

line 151:    hi Number          ctermfg=135[J

line 152:    hi String          ctermfg=144[J

line 153:    hi Conditional     ctermfg=161               cterm=bold[J

line 154:    hi Constant        ctermfg=135               cterm=bold[J

line 155:    hi Cursor          ctermfg=16  ctermbg=253[J

line 156:    hi Debug           ctermfg=225               cterm=bold[J

line 157:    hi Define          ctermfg=81[J

line 158:    hi Delimiter       ctermfg=241[J

line 159: [J

line 160:    hi DiffAdd                     ctermbg=24[J

line 161:    hi DiffChange      ctermfg=181 ctermbg=239[J

line 162:    hi DiffDelete      ctermfg=162 ctermbg=53[J

line 163:    hi DiffText                    ctermbg=102 cterm=bold[J

line 164: [J

line 165:    hi Directory       ctermfg=118               cterm=bold[J

line 166:    hi Error           ctermfg=219 ctermbg=89[J

line 167:    hi ErrorMsg        ctermfg=199 ctermbg=16    cterm=bold[J

line 168:    hi Exception       ctermfg=118               cterm=bold[J

line 169:    hi Float           ctermfg=135[J

line 170:    hi FoldColumn      ctermfg=67  ctermbg=16[J

line 171:    hi Folded          ctermfg=67  ctermbg=16[J

line 172:    hi Function        ctermfg=118[J

line 173:    hi Identifier      ctermfg=208               cterm=none[J

line 174:    hi Ignore          ctermfg=244 ctermbg=232[J

line 175:    hi IncSearch       ctermfg=193 ctermbg=16[J

line 176: [J

line 177:    hi keyword         ctermfg=161               cterm=bold[J

line 178:    hi Label           ctermfg=229               cterm=none[J

line 179:    hi Macro           ctermfg=193[J

line 180:    hi SpecialKey      ctermfg=81[J

line 181: [J

line 182:    hi MatchParen      ctermfg=233  ctermbg=208 cterm=bold[J

line 183:    hi ModeMsg         ctermfg=229[J

line 184:    hi MoreMsg         ctermfg=229[J

line 185:    hi Operator        ctermfg=161[J

line 186: [J

line 187:    " complete menu[J

line 188:    hi Pmenu           ctermfg=81  ctermbg=16[J

line 189:    hi PmenuSel        ctermfg=255 ctermbg=242[J

line 190:    hi PmenuSbar                   ctermbg=232[J

line 191:    hi PmenuThumb      ctermfg=81[J

line 192: [J

line 193:    hi PreCondit       ctermfg=118               cterm=bold[J

line 194:    hi PreProc         ctermfg=118[J

line 195:    hi Question        ctermfg=81[J

line 196:    hi Repeat          ctermfg=161               cterm=bold[J

line 197:    hi Search          ctermfg=0   ctermbg=222   cterm=NONE[J

line 198: [J

line 199:    " marks column[J

line 200:    hi SignColumn      ctermfg=118 ctermbg=235[J

line 201:    hi SpecialChar     ctermfg=161               cterm=bold[J

line 202:    hi SpecialComment  ctermfg=245               cterm=bold[J

line 203:    hi Special         ctermfg=81[J

line 204:    if has("spell")[J

line 205:        hi SpellBad                ctermbg=52[J

line 206:        hi SpellCap                ctermbg=17[J

line 207:        hi SpellLocal              ctermbg=17[J

line 208:        hi SpellRare  ctermfg=none ctermbg=none  cterm=reverse[J

line 209:    endif[J

line 210:    hi Statement       ctermfg=161               cterm=bold[J

line 211:    hi StatusLine      ctermfg=238 ctermbg=253[J

line 212:    hi StatusLineNC    ctermfg=244 ctermbg=232[J

line 213:    hi StorageClass    ctermfg=208[J

line 214:    hi Structure       ctermfg=81[J

line 215:    hi Tag             ctermfg=161[J

line 216:    hi Title           ctermfg=166[J

line 217:    hi Todo            ctermfg=231 ctermbg=232   cterm=bold[J

line 218: [J

line 219:    hi Typedef         ctermfg=81[J

line 220:    hi Type            ctermfg=81                cterm=none[J

line 221:    hi Underlined      ctermfg=244               cterm=underline[J

line 222: [J

line 223:    hi VertSplit       ctermfg=244 ctermbg=232   cterm=bold[J

line 224:    hi VisualNOS                   ctermbg=238[J

line 225: " ctermbg=235[J

line 226:    hi Visual                      ctermbg=161[J

line 227:    hi WarningMsg      ctermfg=231 ctermbg=238   cterm=bold[J

line 228:    hi WildMenu        ctermfg=81  ctermbg=16[J

line 229: [J

line 230:    hi Comment         ctermfg=59[J

line 231:    hi CursorColumn                ctermbg=236[J

line 232:    hi ColorColumn                 ctermbg=236[J

line 233:    hi LineNr          ctermfg=250 ctermbg=236[J

line 234:    hi NonText         ctermfg=59[J

line 235: [J

line 236:    hi SpecialKey      ctermfg=59[J

line 237: [J

line 238:    if exists("g:rehash256") && g:rehash256 == 1[J

line 239:        hi Normal       ctermfg=252 ctermbg=234[J

line 240:        hi CursorLine               ctermbg=236   cterm=none[J

line 241:        hi CursorLineNr ctermfg=208               cterm=none[J

line 242: [J

line 243:        hi Boolean         ctermfg=141[J

line 244:        hi Character       ctermfg=222[J

line 245:        hi Number          ctermfg=141[J

line 246:        hi String          ctermfg=222[J

line 247:        hi Conditional     ctermfg=197               cterm=bold[J

line 248:        hi Constant        ctermfg=141               cterm=bold[J

line 249: [J

line 250:        hi DiffDelete      ctermfg=125 ctermbg=233[J

line 251: [J

line 252:        hi Directory       ctermfg=154               cterm=bold[J

line 253:        hi Error           ctermfg=222 ctermbg=233[J

line 254:        hi Exception       ctermfg=154               cterm=bold[J

line 255:        hi Float           ctermfg=141[J

line 256:        hi Function        ctermfg=154[J

line 257:        hi Identifier      ctermfg=208[J

line 258: [J

line 259:        hi Keyword         ctermfg=197               cterm=bold[J

line 260:        hi Operator        ctermfg=197[J

line 261:        hi PreCondit       ctermfg=154               cterm=bold[J

line 262:        hi PreProc         ctermfg=154[J

line 263:        hi Repeat          ctermfg=197               cterm=bold[J

line 264: [J

line 265:        hi Statement       ctermfg=197               cterm=bold[J

line 266:        hi Tag             ctermfg=197[J

line 267:        hi Title           ctermfg=203[J

line 268:        hi Visual                      ctermbg=238[J

line 269: [J

line 270:        hi Comment         ctermfg=244[J

line 271:        hi LineNr          ctermfg=239 ctermbg=235[J

line 272:        hi NonText         ctermfg=239[J

line 273:        hi SpecialKey      ctermfg=239[J

line 274:    endif[J

line 275: end[J

line 276: [J

line 277: " Must be at the end, because of ctermbg=234 bug.[J

line 278: " https://groups.google.com/forum/#!msg/vim_dev/afPqwAFNdrU/nqh6tOM87QUJ[J

line 279: set background=dark[J

finished sourcing /home/m/.vim/colors/molokai.vim[J
continuing in /home/m/.vimrc[J
line 52: [J

line 53: "################ DRACULA dracula ###########[J

line 54: "packadd! dracula[J

line 55: "syntax enable[J

line 56: "colorscheme dracula[J

line 57: "################ dracula DRACULA ###########[J

line 58: "----------------------------------------------}}}[J

line 59: [J

line 60: [J

line 61: "--- settings -------------------------------------{{{[J

line 62: " Show all line endings as $[J

line 63: set list[J

line 64: [J

line 65: " Do not wrap lines. Allow long lines to extend as far as the line goes.[J

line 66: set nowrap[J

line 67: "set wrap[J

line 68: set textwidth=200[J

line 69: [J

line 70: set spell spelllang=en_us[J

Searching for "spell/en.utf-8.spl" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/spell/en.utf-8.spl"[J
Searching for "/usr/share/vim/vimfiles/spell/en.utf-8.spl"[J
Searching for "/usr/share/vim/vim90/spell/en.utf-8.spl"[J
Reading spell file "/usr/share/vim/vim90/spell/en.utf-8.spl"[J
Searching for "spell/en.utf-8.add.spl" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/spell/en.utf-8.add.spl"[J
Searching for "/usr/share/vim/vimfiles/spell/en.utf-8.add.spl"[J
Searching for "/usr/share/vim/vim90/spell/en.utf-8.add.spl"[J
Searching for "/usr/share/vim/vimfiles/after/spell/en.utf-8.add.spl"[J
Searching for "/home/m/.vim/after/spell/en.utf-8.add.spl"[J
not found in 'runtimepath': "spell/en.utf-8.add.spl"[J
Searching for "spell/en.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/spell/en.vim"[J
Searching for "/usr/share/vim/vimfiles/spell/en.vim"[J
Searching for "/usr/share/vim/vim90/spell/en.vim"[J
Searching for "/usr/share/vim/vimfiles/after/spell/en.vim"[J
Searching for "/home/m/.vim/after/spell/en.vim"[J
not found in 'runtimepath': "spell/en.vim"[J
line 71: "Turn off spell[J

line 72: "set nospell[J

line 73: [J

line 74: setlocal foldmethod=marker[J

line 75: [J

line 76: " when using ,v  the new pane will be on the right side.[J

line 77: " with respect to the pane you give the command from.[J

line 78: set splitright[J

line 79: [J

line 80: " Expand aliases.[J

line 81: let $BASH_ENV = "~/.bash_aliases.sh"[J

line 82: [J

line 83: " Block cursor in Normal mode, vertical cursor in Insert mode,[J

line 84: " horizontal cursor in Replace mode[J

line 85: let &t_EI = "\<Esc>[1 q"[J

line 86: let &t_SR = "\<Esc>[3 q"[J

line 87: let &t_SI = "\<Esc>[5 q"[J

line 88: [J

line 89: " Disable compatibility with vi which can cause unexpected issues.[J

line 90: set nocompatible[J

line 91: " Do not create .swp files[J

line 92: set noswapfile[J

line 93: " Enable type file detection. Vim will be able to try to detect the type of file in use.[J

line 94: filetype on[J

Searching for "filetype.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim90/filetype.vim"[J
chdir(/usr/share/vim/vim90)[J
fchdir() to previous dir[J
line 94: sourcing "/usr/share/vim/vim90/filetype.vim"[J
line 1: echo "in " . $VIMRUNTIME . "/filetype.vim"[J

in /usr/share/vim/vim90/filetype.vim[J
line 2: " Vim support file to detect file types[J

line 3: "[J

line 4: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 5: " Last Change:^I2022 Dec 19[J

line 6: [J

line 7: " Listen very carefully, I will say this only once[J

line 8: if exists("did_load_filetypes")[J

line 9:   finish[J

line 10: endif[J

line 11: let did_load_filetypes = 1[J

line 12: [J

line 13: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 14: let s:cpo_save = &cpo[J

line 15: set cpo&vim[J

line 16: [J

line 17: augroup filetypedetect[J

line 18: [J

line 19: " Ignored extensions[J

line 20: if exists("*fnameescape")[J

line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))[J

line 23: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short[J

line 30: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif[J

line 34: elseif &verbose > 0[J

line 35:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"[J

line 36: endif[J

line 37: [J

line 38: " Pattern used to match file names which should not be inspected.[J

line 39: " Currently finds compressed files.[J

line 40: if !exists("g:ft_ignore_pat")[J

line 41:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'[J

line 42: endif[J

line 43: [J

line 44: " Function used for patterns that end in a star: don't set the filetype if the[J

line 45: " file name matches ft_ignore_pat.[J

line 46: " When using this, the entry should probably be further down below with the[J

line 47: " other StarSetf() calls.[J

line 48: func s:StarSetf(ft)[J

line 53: [J

line 54: " Vim help file[J

line 55: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help[J

line 56: [J

line 57: " Abaqus or Trasys[J

line 58: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()[J

line 59: [J

line 60: " 8th (Firth-derivative)[J

line 61: au BufNewFile,BufRead *.8th^I^I^Isetf 8th[J

line 62: [J

line 63: " A-A-P recipe[J

line 64: au BufNewFile,BufRead *.aap^I^I^Isetf aap[J

line 65: [J

line 66: " A2ps printing utility[J

line 67: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps[J

line 68: [J

line 69: " ABAB/4[J

line 70: au BufNewFile,BufRead *.abap^I^I^Isetf abap[J

line 71: [J

line 72: " ABC music notation[J

line 73: au BufNewFile,BufRead *.abc^I^I^Isetf abc[J

line 74: [J

line 75: " ABEL[J

line 76: au BufNewFile,BufRead *.abl^I^I^Isetf abel[J

line 77: [J

line 78: " AceDB[J

line 79: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb[J

line 80: [J

line 81: " Ada (83, 9X, 95)[J

line 82: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada[J

line 83: if has("vms")[J

line 84:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada[J

line 85: else[J

line 86:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada[J

line 87: endif[J

line 88: [J

line 89: " AHDL[J

line 90: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl[J

line 91: [J

line 92: " AIDL[J

line 93: au BufNewFile,BufRead *.aidl^I^I^Isetf aidl[J

line 94: [J

line 95: " AMPL[J

line 96: au BufNewFile,BufRead *.run^I^I^Isetf ampl[J

line 97: [J

line 98: " Ant[J

line 99: au BufNewFile,BufRead build.xml^I^I^Isetf ant[J

line 100: [J

line 101: " Arduino[J

line 102: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino[J

line 103: [J

line 104: " Apache config file[J

line 105: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache[J

line 106: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache[J

line 107: [J

line 108: " XA65 MOS6510 cross assembler[J

line 109: au BufNewFile,BufRead *.a65^I^I^Isetf a65[J

line 110: [J

line 111: " Applescript[J

line 112: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript[J

line 113: [J

line 114: " Automake (must be before the *.am pattern)[J

line 115: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake[J

line 116: [J

line 117: " Applix ELF[J

line 118: au BufNewFile,BufRead *.am^I^I^Isetf elf[J

line 119: [J

line 120: " ALSA configuration[J

line 121: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf[J

line 122: [J

line 123: " Arc Macro Language[J

line 124: au BufNewFile,BufRead *.aml^I^I^Isetf aml[J

line 125: [J

line 126: " APT config file[J

line 127: au BufNewFile,BufRead apt.conf^I^I       setf aptconf[J

line 128: au BufNewFile,BufRead */.aptitude/config       setf aptconf[J

line 129: " more generic pattern far down[J

line 130: [J

line 131: " Arch Inventory file[J

line 132: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch[J

line 133: [J

line 134: " ART*Enterprise (formerly ART-IM)[J

line 135: au BufNewFile,BufRead *.art^I^I^Isetf art[J

line 136: [J

line 137: " AsciiDoc[J

line 138: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc[J

line 139: [J

line 140: " ASN.1[J

line 141: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn[J

line 142: [J

line 143: " Active Server Pages (with Visual Basic Script)[J

line 144: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif[J

line 150: [J

line 151: " Active Server Pages (with Perl or Visual Basic Script)[J

line 152: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif[J

line 160: [J

line 161: " Grub (must be before pattern *.lst)[J

line 162: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub[J

line 163: [J

line 164: " Maxima, see:[J

line 165: " https://maxima.sourceforge.io/docs/manual/maxima_71.html#file_005ftype_005fmaxima[J

line 166: " Must be before the pattern *.mac.[J

line 167: " *.dem omitted - also used by gnuplot demos[J

line 168: " *.mc omitted - used by dist#ft#McSetf()[J

line 169: au BufNewFile,BufRead *.demo,*.dm{1,2,3,t},*.wxm,maxima-init.mac setf maxima[J

line 170: [J

line 171: " Assembly (all kinds)[J

line 172: " *.lst is not pure assembly, it has two extra columns (address, byte codes)[J

line 173: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()[J

line 174: [J

line 175: " Assembly - Macro (VAX)[J

line 176: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm[J

line 177: [J

line 178: " Astro[J

line 179: au BufNewFile,BufRead *.astro^I^I^Isetf astro[J

line 180: [J

line 181: " Atlas[J

line 182: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas[J

line 183: [J

line 184: " Atom is based on XML[J

line 185: au BufNewFile,BufRead *.atom^I^I^Isetf xml[J

line 186: [J

line 187: " Autoit v3[J

line 188: au BufNewFile,BufRead *.au3^I^I^Isetf autoit[J

line 189: [J

line 190: " Autohotkey[J

line 191: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey[J

line 192: [J

line 193: " Autotest .at files are actually m4[J

line 194: au BufNewFile,BufRead *.at^I^I^Isetf m4[J

line 195: [J

line 196: " Avenue[J

line 197: au BufNewFile,BufRead *.ave^I^I^Isetf ave[J

line 198: [J

line 199: " Awk[J

line 200: au BufNewFile,BufRead *.awk,*.gawk^I^Isetf awk[J

line 201: [J

line 202: " B[J

line 203: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b[J

line 204: [J

line 205: " BASIC or Visual Basic[J

line 206: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTbas()[J

line 207: au BufNewFile,BufRead *.bi,*.bm^I^I^Icall dist#ft#FTbas()[J

line 208: [J

line 209: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET[J

line 210: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb[J

line 211: [J

line 212: " IBasic file (similar to QBasic)[J

line 213: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic[J

line 214: [J

line 215: " FreeBasic file (similar to QBasic)[J

line 216: au BufNewFile,BufRead *.fb^I^I^Isetf freebasic[J

line 217: [J

line 218: " Batch file for MSDOS. See dist#ft#FTsys for *.sys[J

line 219: au BufNewFile,BufRead *.bat^I^I^Isetf dosbatch[J

line 220: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.[J

line 221: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif[J

line 223: " ABB RAPID or Batch file for MSDOS.[J

line 224: au BufNewFile,BufRead *.sys\c^I^I^Icall dist#ft#FTsys()[J

line 225: [J

line 226: " Batch file for 4DOS[J

line 227: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()[J

line 228: [J

line 229: " BC calculator[J

line 230: au BufNewFile,BufRead *.bc^I^I^Isetf bc[J

line 231: [J

line 232: " BDF font[J

line 233: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf[J

line 234: [J

line 235: " Beancount[J

line 236: au BufNewFile,BufRead *.beancount^I^Isetf beancount[J

line 237: [J

line 238: " BibTeX bibliography database file[J

line 239: au BufNewFile,BufRead *.bib^I^I^Isetf bib[J

line 240: [J

line 241: " BibTeX Bibliography Style[J

line 242: au BufNewFile,BufRead *.bst^I^I^Isetf bst[J

line 243: [J

line 244: " Bicep[J

line 245: au BufNewFile,BufRead *.bicep^I^I^Isetf bicep[J

line 246: [J

line 247: " BIND configuration[J

line 248: " sudoedit uses namedXXXX.conf[J

line 249: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named[J

line 250: [J

line 251: " BIND zone[J

line 252: au BufNewFile,BufRead named.root^I^Isetf bindzone[J

line 253: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')[J

line 254: [J

line 255: " Blank[J

line 256: au BufNewFile,BufRead *.bl^I^I^Isetf blank[J

line 257: [J

line 258: " Bitbake[J

line 259: au BufNewFile,BufRead *.bb,*.bbappend,*.bbclass,*/build/conf/*.conf,*/meta{-*,}/conf/*.conf^Isetf bitbake[J

line 260: [J

line 261: " Blkid cache file[J

line 262: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml[J

line 263: [J

line 264: " BSDL[J

line 265: au BufNewFile,BufRead *.bsd,*.bsdl^I^I^Isetf bsdl[J

line 266: [J

line 267: " Bazel (http://bazel.io)[J

line 268: autocmd BufRead,BufNewFile *.bzl,*.bazel,WORKSPACE^Isetf bzl[J

line 269: if has("fname_case")[J

line 270:   " There is another check for BUILD further below.[J

line 271:   autocmd BufRead,BufNewFile *.BUILD,BUILD^I^Isetf bzl[J

line 272: endif[J

line 273: [J

line 274: " C or lpc[J

line 275: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()[J

line 276: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc[J

line 277: [J

line 278: " Calendar[J

line 279: au BufNewFile,BufRead calendar^I^I^Isetf calendar[J

line 280: [J

line 281: " C#[J

line 282: au BufNewFile,BufRead *.cs,*.csx^I^Isetf cs[J

line 283: [J

line 284: " CSDL[J

line 285: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl[J

line 286: [J

line 287: " Cabal[J

line 288: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal[J

line 289: [J

line 290: " Cdrdao TOC[J

line 291: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc[J

line 292: [J

line 293: " Cdrdao config[J

line 294: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf[J

line 295: [J

line 296: " Cfengine[J

line 297: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine[J

line 298: [J

line 299: " ChaiScript[J

line 300: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript[J

line 301: [J

line 302: " Chatito[J

line 303: au BufNewFile,BufRead *.chatito^I^I^Isetf chatito[J

line 304: [J

line 305: " Comshare Dimension Definition Language[J

line 306: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl[J

line 307: [J

line 308: " Conary Recipe[J

line 309: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe[J

line 310: [J

line 311: " Controllable Regex Mutilator[J

line 312: au BufNewFile,BufRead *.crm^I^I^Isetf crm[J

line 313: [J

line 314: " Cyn++[J

line 315: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp[J

line 316: [J

line 317: " Cynlib[J

line 318: " .cc and .cpp files can be C++ or Cynlib.[J

line 319: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif[J

line 321: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif[J

line 323: [J

line 324: " C++[J

line 325: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp[J

line 326: if has("fname_case")[J

line 327:   au BufNewFile,BufRead *.C,*.H setf cpp[J

line 328: endif[J

line 329: [J

line 330: " .h files can be C, Ch C++, ObjC or ObjC++.[J

line 331: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is[J

line 332: " detected automatically.[J

line 333: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()[J

line 334: [J

line 335: " Ch (CHscript)[J

line 336: au BufNewFile,BufRead *.chf^I^I^Isetf ch[J

line 337: [J

line 338: " TLH files are C++ headers generated by Visual C++'s #import from typelibs[J

line 339: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp[J

line 340: [J

line 341: " Cascading Style Sheets[J

line 342: au BufNewFile,BufRead *.css^I^I^Isetf css[J

line 343: [J

line 344: " Century Term Command Scripts (*.cmd too)[J

line 345: au BufNewFile,BufRead *.con^I^I^Isetf cterm[J

line 346: [J

line 347: " Changelog[J

line 348: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch,*/debian/changelog^Isetf debchangelog[J

line 350: [J

line 351: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif[J

line 357: [J

line 358: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif[J

line 362: [J

line 363: " CHILL[J

line 364: au BufNewFile,BufRead *..ch^I^I^Isetf chill[J

line 365: [J

line 366: " Changes for WEB and CWEB or CHILL[J

line 367: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()[J

line 368: [J

line 369: " ChordPro[J

line 370: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro[J

line 371: [J

line 372: " Clang-format[J

line 373: au BufNewFile,BufRead .clang-format^I^Isetf yaml[J

line 374: [J

line 375: " Clang-tidy[J

line 376: au BufNewFile,BufRead .clang-tidy^I^Isetf yaml[J

line 377: [J

line 378: " Clean[J

line 379: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean[J

line 380: [J

line 381: " Clever[J

line 382: au BufNewFile,BufRead *.eni^I^I^Isetf cl[J

line 383: [J

line 384: " Clever or dtd[J

line 385: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()[J

line 386: [J

line 387: " Clipper, FoxPro, ABB RAPID or eviews[J

line 388: au BufNewFile,BufRead *.prg\c^I^I^Icall dist#ft#FTprg()[J

line 389: [J

line 390: " Clojure[J

line 391: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure[J

line 392: [J

line 393: " Cmake[J

line 394: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake[J

line 395: [J

line 396: " Cmusrc[J

line 397: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc[J

line 398: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc[J

line 399: [J

line 400: " Cobol[J

line 401: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol[J

line 402: "   cobol or zope form controller python script? (heuristic)[J

line 403: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif[J

line 409: [J

line 410: " Coco/R[J

line 411: au BufNewFile,BufRead *.atg^I^I^Isetf coco[J

line 412: [J

line 413: " Cold Fusion[J

line 414: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf[J

line 415: [J

line 416: " Configure scripts[J

line 417: au BufNewFile,BufRead configure.in,configure.ac setf config[J

line 418: [J

line 419: " Cooklang[J

line 420: au BufNewFile,BufRead *.cook^I^I^Isetf cook[J

line 421: [J

line 422: " Clinical Quality Language (CQL)[J

line 423: " .cql is also mentioned as the 'XDCC Catcher queue list' file extension.[J

line 424: " If support for XDCC Catcher is needed in the future, the contents of the file[J

line 425: " needs to be inspected.[J

line 426: au BufNewFile,BufRead *.cql^I^I^Isetf cqlang[J

line 427: [J

line 428: " CSV Files[J

line 429: au BufNewFile,BufRead *.csv^I^I^Isetf csv[J

line 430: [J

line 431: " CUDA Compute Unified Device Architecture[J

line 432: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda[J

line 433: [J

line 434: " Dockerfile; Podman uses the same syntax with name Containerfile[J

line 435: " Also see Dockerfile.* below.[J

line 436: au BufNewFile,BufRead Containerfile,Dockerfile,dockerfile,*.[dD]ockerfile^Isetf dockerfile[J

line 437: [J

line 438: " WildPackets EtherPeek Decoder[J

line 439: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd[J

line 440: [J

line 441: " Enlightenment configuration files[J

line 442: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c[J

line 443: [J

line 444: " Eterm[J

line 445: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm[J

line 446: [J

line 447: " Elixir or Euphoria[J

line 448: au BufNewFile,BufRead *.ex call dist#ft#ExCheck()[J

line 449: [J

line 450: " Elixir[J

line 451: au BufRead,BufNewFile mix.lock,*.exs setf elixir[J

line 452: au BufRead,BufNewFile *.eex,*.leex setf eelixir[J

line 453: [J

line 454: " Elvish[J

line 455: au BufRead,BufNewFile *.elv setf elvish[J

line 456: [J

line 457: " Euphoria 3 or 4[J

line 458: au BufNewFile,BufRead *.eu,*.ew,*.exu,*.exw  call dist#ft#EuphoriaCheck()[J

line 459: if has("fname_case")[J

line 460:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()[J

line 461: endif[J

line 462: [J

line 463: " Lynx config files[J

line 464: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx[J

line 465: [J

line 466: " LyRiCs[J

line 467: au BufNewFile,BufRead *.lrc^I^I^Isetf lyrics[J

line 468: [J

line 469: " Modula-3 configuration language (must be before *.cfg and *makefile)[J

line 470: au BufNewFile,BufRead *.quake,cm3.cfg^I^Isetf m3quake[J

line 471: au BufNewFile,BufRead m3makefile,m3overrides^Isetf m3build[J

line 472: [J

line 473: " Quake[J

line 474: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake[J

line 475: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake[J

line 476: [J

line 477: " Quake C[J

line 478: au BufNewFile,BufRead *.qc^I^I^Isetf c[J

line 479: [J

line 480: " Configure files[J

line 481: au BufNewFile,BufRead *.cfg\c^I^I^Icall dist#ft#FTcfg()[J

line 482: [J

line 483: " Cucumber[J

line 484: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber[J

line 485: [J

line 486: " Communicating Sequential Processes[J

line 487: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp[J

line 488: [J

line 489: " CUPL logic description and simulation[J

line 490: au BufNewFile,BufRead *.pld^I^I^Isetf cupl[J

line 491: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim[J

line 492: [J

line 493: " Dart[J

line 494: au BufRead,BufNewfile *.dart,*.drt^I^Isetf dart[J

line 495: [J

line 496: " Debian Control[J

line 497: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol[J

line 498: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif[J

line 502: [J

line 503: " Debian Copyright[J

line 504: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright[J

line 505: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif[J

line 509: [J

line 510: " Debian Sources.list[J

line 511: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources[J

line 512: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources[J

line 513: [J

line 514: " Deny hosts[J

line 515: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts[J

line 516: [J

line 517: " dnsmasq(8) configuration files[J

line 518: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq[J

line 519: [J

line 520: " ROCKLinux package description[J

line 521: au BufNewFile,BufRead *.desc^I^I^Isetf desc[J

line 522: [J

line 523: " the D language or dtrace[J

line 524: au BufNewFile,BufRead */dtrace/*.d^I^Isetf dtrace[J

line 525: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()[J

line 526: [J

line 527: " Desktop files[J

line 528: au BufNewFile,BufRead *.desktop,*.directory^Isetf desktop[J

line 529: [J

line 530: " Dict config[J

line 531: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf[J

line 532: [J

line 533: " Dictd config[J

line 534: au BufNewFile,BufRead dictd*.conf^I^Isetf dictdconf[J

line 535: [J

line 536: " DEP3 formatted patch files[J

line 537: au BufNewFile,BufRead */debian/patches/*^Icall dist#ft#Dep3patch()[J

line 538: [J

line 539: " Diff files[J

line 540: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff[J

line 541: au BufNewFile,BufRead *.patch if getline(1) =~# '^From [0-9a-f]\{40,\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif[J

line 547: [J

line 548: " Dircolors[J

line 549: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors[J

line 550: [J

line 551: " Diva (with Skill) or InstallShield[J

line 552: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif[J

line 558: [J

line 559: " DCL (Digital Command Language - vms) or DNS zone file[J

line 560: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')[J

line 561: [J

line 562: " DOT[J

line 563: au BufNewFile,BufRead *.dot,*.gv^I^Isetf dot[J

line 564: [J

line 565: " Dune[J

line 566: au BufNewFile,BufRead jbuild,dune,dune-project,dune-workspace setf dune[J

line 567: [J

line 568: " Dylan - lid files[J

line 569: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid[J

line 570: [J

line 571: " Dylan - intr files (melange)[J

line 572: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr[J

line 573: [J

line 574: " Dylan[J

line 575: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan[J

line 576: [J

line 577: " Microsoft Module Definition[J

line 578: au BufNewFile,BufRead *.def^I^I^Isetf def[J

line 579: [J

line 580: " Dracula[J

line 581: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula[J

line 582: [J

line 583: " Datascript[J

line 584: au BufNewFile,BufRead *.ds^I^I^Isetf datascript[J

line 585: [J

line 586: " dsl: DSSSL or Structurizr[J

line 587: au BufNewFile,BufRead *.dsl if getline(1) =~ '^\s*<\!' |   setf dsl | else |   setf structurizr | endif[J

line 593: [J

line 594: " DTD (Document Type Definition for XML)[J

line 595: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd[J

line 596: [J

line 597: " DTS/DSTI (device tree files)[J

line 598: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts[J

line 599: [J

line 600: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn[J

line 601: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif[J

line 602: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif[J

line 608: [J

line 609: " EditorConfig[J

line 610: au BufNewFile,BufRead .editorconfig^I^Isetf editorconfig[J

line 611: [J

line 612: " Embedix Component Description[J

line 613: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd[J

line 614: [J

line 615: " Eiffel or Specman or Euphoria[J

line 616: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()[J

line 617: [J

line 618: " Elinks configuration[J

line 619: au BufNewFile,BufRead elinks.conf^I^Isetf elinks[J

line 620: [J

line 621: " ERicsson LANGuage; Yaws is erlang too[J

line 622: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang[J

line 623: [J

line 624: " Elm[J

line 625: au BufNewFile,BufRead *.elm^I^I^Isetf elm[J

line 626: [J

line 627: " Elm Filter Rules file[J

line 628: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt[J

line 629: [J

line 630: " ESMTP rc file[J

line 631: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc[J

line 632: [J

line 633: " ESQL-C[J

line 634: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc[J

line 635: [J

line 636: " Esterel[J

line 637: au BufNewFile,BufRead *.strl^I^I^Isetf esterel[J

line 638: [J

line 639: " Essbase script[J

line 640: au BufNewFile,BufRead *.csc^I^I^Isetf csc[J

line 641: [J

line 642: " Exim[J

line 643: au BufNewFile,BufRead exim.conf^I^I^Isetf exim[J

line 644: [J

line 645: " Expect[J

line 646: au BufNewFile,BufRead *.exp^I^I^Isetf expect[J

line 647: [J

line 648: " Exports[J

line 649: au BufNewFile,BufRead exports^I^I^Isetf exports[J

line 650: [J

line 651: " Falcon[J

line 652: au BufNewFile,BufRead *.fal^I^I^Isetf falcon[J

line 653: [J

line 654: " Fantom[J

line 655: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan[J

line 656: [J

line 657: " Factor[J

line 658: au BufNewFile,BufRead *.factor^I^I^Isetf factor[J

line 659: [J

line 660: " Fennel[J

line 661: autocmd BufRead,BufNewFile *.fnl^I^Isetf fennel[J

line 662: [J

line 663: " Fetchmail RC file[J

line 664: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail[J

line 665: [J

line 666: " Fish shell[J

line 667: au BufNewFile,BufRead *.fish^I^I^Isetf fish[J

line 668: [J

line 669: " FlexWiki - disabled, because it has side effects when a .wiki file[J

line 670: " is not actually FlexWiki[J

line 671: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki[J

line 672: [J

line 673: " Focus Executable[J

line 674: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec[J

line 675: [J

line 676: " Focus Master file (but not for auto.master)[J

line 677: au BufNewFile,BufRead auto.master^I^Isetf conf[J

line 678: au BufNewFile,BufRead *.mas,*.master^I^Isetf master[J

line 679: [J

line 680: " Forth[J

line 681: au BufNewFile,BufRead *.ft,*.fth^I^Isetf forth[J

line 682: [J

line 683: " Reva Forth[J

line 684: au BufNewFile,BufRead *.frt^I^I^Isetf reva[J

line 685: [J

line 686: " Fortran[J

line 687: if has("fname_case")[J

line 688:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran[J

line 689: endif[J

line 690: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran[J

line 691: [J

line 692: " Framescript[J

line 693: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript[J

line 694: [J

line 695: " FStab[J

line 696: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab[J

line 697: [J

line 698: " Fusion[J

line 699: au BufRead,BufNewFile *.fusion^I^I^Isetf fusion[J

line 700: [J

line 701: " F# or Forth[J

line 702: au BufNewFile,BufRead *.fs^I^I^Icall dist#ft#FTfs()[J

line 703: [J

line 704: " FHIR Shorthand (FSH)[J

line 705: au BufNewFile,BufRead *.fsh^I^I^Isetf fsh[J

line 706: [J

line 707: " F#[J

line 708: au BufNewFile,BufRead *.fsi,*.fsx^I^Isetf fsharp[J

line 709: [J

line 710: " GDB command files[J

line 711: au BufNewFile,BufRead .gdbinit,gdbinit,.gdbearlyinit,gdbearlyinit,*.gdb^I^Isetf gdb[J

line 712: [J

line 713: " GDMO[J

line 714: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo[J

line 715: [J

line 716: " GDscript[J

line 717: au BufNewFile,BufRead *.gd^I^I^Isetf gdscript[J

line 718: [J

line 719: " Godot resource[J

line 720: au BufRead,BufNewFile *.tscn,*.tres^I^Isetf gdresource[J

line 721: [J

line 722: " Godot shader[J

line 723: au BufRead,BufNewFile *.gdshader,*.shader^Isetf gdshader[J

line 724: [J

line 725: " Gedcom[J

line 726: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom[J

line 727: [J

line 728: " Gemtext[J

line 729: au BufNewFile,BufRead *.gmi,*.gemini^I^Isetf gemtext[J

line 730: [J

line 731: " Gift (Moodle)[J

line 732: autocmd BufRead,BufNewFile *.gift^I^Isetf gift[J

line 733: [J

line 734: " Git[J

line 735: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG^Isetf gitcommit[J

line 736: au BufNewFile,BufRead NOTES_EDITMSG,EDIT_DESCRIPTION^I^Isetf gitcommit[J

line 737: au BufNewFile,BufRead *.git/config,.gitconfig,*/etc/gitconfig^Isetf gitconfig[J

line 738: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig[J

line 739: au BufNewFile,BufRead *.git/config.worktree^I^I^Isetf gitconfig[J

line 740: au BufNewFile,BufRead *.git/worktrees/*/config.worktree^I^Isetf gitconfig[J

line 741: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig[J

line 742: if !empty($XDG_CONFIG_HOME)[J

line 743:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig[J

line 744:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/attributes^I^Isetf gitattributes[J

line 745:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/ignore^I^Isetf gitignore[J

line 746: endif[J

line 747: au BufNewFile,BufRead .gitattributes,*.git/info/attributes^Isetf gitattributes[J

line 748: au BufNewFile,BufRead */.config/git/attributes^I^I^Isetf gitattributes[J

line 749: au BufNewFile,BufRead */etc/gitattributes^I^I^Isetf gitattributes[J

line 750: au BufNewFile,BufRead .gitignore,*.git/info/exclude^I^Isetf gitignore[J

line 751: au BufNewFile,BufRead */.config/git/ignore^I^I^Isetf gitignore[J

line 752: au BufNewFile,BufRead git-rebase-todo^I^I^I^Isetf gitrebase[J

line 753: au BufRead,BufNewFile .gitsendemail.msg.??????^I^I^Isetf gitsendemail[J

line 754: au BufNewFile,BufRead *.git/* if getline(1) =~# '^\x\{40,\}\>\|^ref: ' |   setf git | endif[J

line 758: [J

line 759: " Gkrellmrc[J

line 760: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc[J

line 761: [J

line 762: " Gleam[J

line 763: au BufNewFile,BufRead *.gleam^I^I^Isetf gleam[J

line 764: [J

line 765: " GLSL[J

line 766: au BufNewFile,BufRead *.glsl^I^I^Isetf glsl[J

line 767: [J

line 768: " GP scripts (2.0 and onward)[J

line 769: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp[J

line 770: [J

line 771: " GPG[J

line 772: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg[J

line 773: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg[J

line 774: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg[J

line 775: if !empty($GNUPGHOME)[J

line 776:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg[J

line 777:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg[J

line 778: endif[J

line 779: [J

line 780: " gnash(1) configuration files[J

line 781: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash[J

line 782: [J

line 783: " Gitolite[J

line 784: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite[J

line 785: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl[J

line 786: [J

line 787: " Glimmer-flavored TypeScript and JavaScript[J

line 788: au BufNewFile,BufRead *.gts^I^I^Isetf typescript.glimmer[J

line 789: au BufNewFile,BufRead *.gjs^I^I^Isetf javascript.glimmer[J

line 790: [J

line 791: " Gnuplot scripts[J

line 792: au BufNewFile,BufRead *.gpi,.gnuplot^I^Isetf gnuplot[J

line 793: [J

line 794: " Go (Google)[J

line 795: au BufNewFile,BufRead *.go^I^I^Isetf go[J

line 796: au BufNewFile,BufRead Gopkg.lock^I^Isetf toml[J

line 797: au BufRead,BufNewFile go.work^I^I^Isetf gowork[J

line 798: [J

line 799: " GrADS scripts[J

line 800: au BufNewFile,BufRead *.gs^I^I^Isetf grads[J

line 801: [J

line 802: " GraphQL[J

line 803: au BufNewFile,BufRead *.graphql,*.graphqls,*.gql^I^I^Isetf graphql[J

line 804: [J

line 805: " Gretl[J

line 806: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl[J

line 807: [J

line 808: " Groovy[J

line 809: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy[J

line 810: [J

line 811: " GNU Server Pages[J

line 812: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp[J

line 813: [J

line 814: " Group file[J

line 815: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group[J

line 816: [J

line 817: " GTK RC[J

line 818: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc[J

line 819: [J

line 820: " GYP[J

line 821: au BufNewFile,BufRead *.gyp,*.gypi^I^Isetf gyp[J

line 822: [J

line 823: " Hack[J

line 824: au BufRead,BufNewFile *.hack,*.hackpartial^I^I^Isetf hack[J

line 825: [J

line 826: " Haml[J

line 827: au BufNewFile,BufRead *.haml^I^I^Isetf haml[J

line 828: [J

line 829: " Hamster Classic | Playground files[J

line 830: au BufNewFile,BufRead *.hsm^I^I^Isetf hamster[J

line 831: [J

line 832: " Handlebars[J

line 833: au BufNewFile,BufRead *.hbs^I^I^Isetf handlebars[J

line 834: [J

line 835: " Hare[J

line 836: au BufNewFile,BufRead *.ha^I^I^Isetf hare[J

line 837: [J

line 838: " Haskell[J

line 839: au BufNewFile,BufRead *.hs,*.hsc,*.hs-boot,*.hsig setf haskell[J

line 840: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell[J

line 841: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell[J

line 842: au BufNewFile,BufRead cabal.project^I^Isetf cabalproject[J

line 843: au BufNewFile,BufRead $HOME/.cabal/config^Isetf cabalconfig[J

line 844: au BufNewFile,BufRead cabal.config^I^Isetf cabalconfig[J

line 845: [J

line 846: " Haste[J

line 847: au BufNewFile,BufRead *.ht^I^I^Isetf haste[J

line 848: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc[J

line 849: [J

line 850: " HCL[J

line 851: au BufRead,BufNewFile *.hcl^I^I^Isetf hcl[J

line 852: [J

line 853: " Go checksum file (must be before *.sum Hercules)[J

line 854: au BufNewFile,BufRead go.sum^I^I^Isetf gosum[J

line 855: [J

line 856: " Hercules[J

line 857: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules[J

line 858: [J

line 859: " HEEx[J

line 860: au BufRead,BufNewFile *.heex^I^I^Isetf heex[J

line 861: [J

line 862: " HEX (Intel)[J

line 863: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex[J

line 864: [J

line 865: " Hjson[J

line 866: au BufNewFile,BufRead *.hjson^I^I^Isetf hjson[J

line 867: [J

line 868: " HLS Playlist (or another form of playlist)[J

line 869: au BufNewFile,BufRead *.m3u,*.m3u8^I^Isetf hlsplaylist[J

line 870: [J

line 871: " Hollywood[J

line 872: au BufRead,BufNewFile *.hws^I^I^Isetf hollywood[J

line 873: [J

line 874: " Hoon[J

line 875: au BufRead,BufNewFile *.hoon^I^I^Isetf hoon[J

line 876: [J

line 877: " Tilde (must be before HTML)[J

line 878: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde[J

line 879: [J

line 880: " HTML (.shtml and .stm for server side)[J

line 881: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()[J

line 882: au BufNewFile,BufRead *.cshtml^I^I^Isetf html[J

line 883: [J

line 884: " HTML with Ruby - eRuby[J

line 885: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby[J

line 886: [J

line 887: " HTML with M4[J

line 888: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4[J

line 889: [J

line 890: " Some template.  Used to be HTML Cheetah.[J

line 891: au BufNewFile,BufRead *.tmpl^I^I^Isetf template[J

line 892: [J

line 893: " Host config[J

line 894: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf[J

line 895: [J

line 896: " Hosts access[J

line 897: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess[J

line 898: [J

line 899: " Hyper Builder[J

line 900: au BufNewFile,BufRead *.hb^I^I^Isetf hb[J

line 901: [J

line 902: " Httest[J

line 903: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest[J

line 904: [J

line 905: " i3[J

line 906: au BufNewFile,BufRead */i3/config^I^Isetf i3config[J

line 907: au BufNewFile,BufRead */.i3/config^I^Isetf i3config[J

line 908: [J

line 909: " sway[J

line 910: au BufNewFile,BufRead */sway/config^I^Isetf swayconfig[J

line 911: au BufNewFile,BufRead */.sway/config^I^Isetf swayconfig[J

line 912: [J

line 913: " Icon[J

line 914: au BufNewFile,BufRead *.icn^I^I^Isetf icon[J

line 915: [J

line 916: " IDL (Interface Description Language)[J

line 917: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()[J

line 918: [J

line 919: " Microsoft IDL (Interface Description Language)  Also *.idl[J

line 920: " MOF = WMI (Windows Management Instrumentation) Managed Object Format[J

line 921: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl[J

line 922: [J

line 923: " Icewm menu[J

line 924: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu[J

line 925: [J

line 926: " Indent profile (must come before IDL *.pro!)[J

line 927: au BufNewFile,BufRead .indent.pro^I^Isetf indent[J

line 928: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')[J

line 929: [J

line 930: " IDL (Interactive Data Language)[J

line 931: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')[J

line 932: [J

line 933: " Indent RC[J

line 934: au BufNewFile,BufRead indentrc^I^I^Isetf indent[J

line 935: [J

line 936: " Inform[J

line 937: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform[J

line 938: [J

line 939: " Initng[J

line 940: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng[J

line 941: [J

line 942: " Innovation Data Processing[J

line 943: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c^Isetf upstreamdat[J

line 944: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c^Isetf upstreamlog[J

line 945: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog[J

line 946: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c^Isetf usserverlog[J

line 947: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c^Isetf usw2kagtlog[J

line 948: [J

line 949: " Ipfilter[J

line 950: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter[J

line 951: [J

line 952: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)[J

line 953: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl[J

line 954: [J

line 955: " .INI file for MSDOS[J

line 956: au BufNewFile,BufRead *.ini^I^I^Isetf dosini[J

line 957: [J

line 958: " SysV Inittab[J

line 959: au BufNewFile,BufRead inittab^I^I^Isetf inittab[J

line 960: [J

line 961: " Inno Setup[J

line 962: au BufNewFile,BufRead *.iss^I^I^Isetf iss[J

line 963: [J

line 964: " J[J

line 965: au BufNewFile,BufRead *.ijs^I^I^Isetf j[J

line 966: [J

line 967: " JAL[J

line 968: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal[J

line 969: [J

line 970: " Jam[J

line 971: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam[J

line 972: [J

line 973: " Java[J

line 974: au BufNewFile,BufRead *.java,*.jav^I^Isetf java[J

line 975: [J

line 976: " JavaCC[J

line 977: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc[J

line 978: [J

line 979: " JavaScript, ECMAScript, ES module script, CommonJS script[J

line 980: au BufNewFile,BufRead *.js,*.jsm,*.javascript,*.es,*.mjs,*.cjs   setf javascript[J

line 981: [J

line 982: " JavaScript with React[J

line 983: au BufNewFile,BufRead *.jsx^I^I^Isetf javascriptreact[J

line 984: [J

line 985: " Java Server Pages[J

line 986: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp[J

line 987: [J

line 988: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

line 989: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties[J

line 990: " Eclipse preference files use Java Properties syntax[J

line 991: au BufNewFile,BufRead org.eclipse.*.prefs^Isetf jproperties[J

line 992: [J

line 993: " Jess[J

line 994: au BufNewFile,BufRead *.clp^I^I^Isetf jess[J

line 995: [J

line 996: " Jgraph[J

line 997: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph[J

line 998: [J

line 999: " Jovial[J

line 1000: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial[J

line 1001: [J

line 1002: " Jq[J

line 1003: au BufNewFile,BufRead *.jq^I^I^Isetf jq[J

line 1004: [J

line 1005: " JSON5[J

line 1006: au BufNewFile,BufRead *.json5^I^I^Isetf json5[J

line 1007: [J

line 1008: " JSON Patch (RFC 6902)[J

line 1009: au BufNewFile,BufRead *.json-patch^I^Isetf json[J

line 1010: [J

line 1011: " Jupyter Notebook is also json[J

line 1012: au BufNewFile,BufRead *.ipynb^I^I^Isetf json[J

line 1013: [J

line 1014: " Other files that look like json[J

line 1015: au BufNewFile,BufRead .prettierrc,.firebaserc^Isetf json[J

line 1016: [J

line 1017: " JSONC (JSON with comments)[J

line 1018: au BufNewFile,BufRead *.jsonc,.babelrc,.eslintrc,.jsfmtrc ^Isetf jsonc[J

line 1019: au BufNewFile,BufRead .jshintc,.hintrc,.swrc,[jt]sconfig*.json ^Isetf jsonc[J

line 1020: [J

line 1021: " JSON[J

line 1022: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json[J

line 1023: [J

line 1024: " Jsonnet[J

line 1025: au BufNewFile,BufRead *.jsonnet,*.libsonnet^Isetf jsonnet[J

line 1026: [J

line 1027: " Julia[J

line 1028: au BufNewFile,BufRead *.jl^I^I^Isetf julia[J

line 1029: [J

line 1030: " Kixtart[J

line 1031: au BufNewFile,BufRead *.kix^I^I^Isetf kix[J

line 1032: [J

line 1033: " Kuka Robot Language[J

line 1034: au BufNewFile,BufRead *.src\c^I^I^Icall dist#ft#FTsrc()[J

line 1035: au BufNewFile,BufRead *.dat\c^I^I^Icall dist#ft#FTdat()[J

line 1036: au BufNewFile,BufRead *.sub\c^I^I^Isetf krl[J

line 1037: [J

line 1038: " Kimwitu[++][J

line 1039: au BufNewFile,BufRead *.k^I^I^Isetf kwt[J

line 1040: [J

line 1041: " Kivy[J

line 1042: au BufNewFile,BufRead *.kv^I^I^Isetf kivy[J

line 1043: [J

line 1044: " Kotlin[J

line 1045: au BufNewFile,BufRead *.kt,*.ktm,*.kts^I^Isetf kotlin[J

line 1046: [J

line 1047: " KDE script[J

line 1048: au BufNewFile,BufRead *.ks^I^I^Isetf kscript[J

line 1049: [J

line 1050: " Kconfig[J

line 1051: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig[J

line 1052: [J

line 1053: " Lace (ISE)[J

line 1054: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace[J

line 1055: [J

line 1056: " Larch Shared Language[J

line 1057: au BufNewFile,BufRead .lsl^I^I^Icall dist#ft#FTlsl()[J

line 1058: [J

line 1059: " Latexmkrc[J

line 1060: au BufNewFile,BufRead .latexmkrc,latexmkrc^Isetf perl[J

line 1061: [J

line 1062: " Latte[J

line 1063: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte[J

line 1064: [J

line 1065: " Limits[J

line 1066: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits[J

line 1067: [J

line 1068: " LambdaProlog or SML (see dist#ft#FTmod for *.mod)[J

line 1069: au BufNewFile,BufRead *.sig^I^I^Icall dist#ft#FTsig()[J

line 1070: [J

line 1071: " LDAP LDIF[J

line 1072: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif[J

line 1073: [J

line 1074: " Ld loader[J

line 1075: au BufNewFile,BufRead *.ld^I^I^Isetf ld[J

line 1076: [J

line 1077: " Ledger[J

line 1078: au BufRead,BufNewFile *.ldg,*.ledger,*.journal^I^I^Isetf ledger[J

line 1079: [J

line 1080: " Less[J

line 1081: au BufNewFile,BufRead *.less^I^I^Isetf less[J

line 1082: [J

line 1083: " Lex[J

line 1084: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex[J

line 1085: [J

line 1086: " Libao[J

line 1087: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao[J

line 1088: [J

line 1089: " Libsensors[J

line 1090: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors[J

line 1091: [J

line 1092: " LFTP[J

line 1093: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp[J

line 1094: [J

line 1095: " Lifelines (or Lex for C++!)[J

line 1096: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines[J

line 1097: [J

line 1098: " Lilo: Linux loader[J

line 1099: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo[J

line 1100: [J

line 1101: " Lilypond[J

line 1102: au BufNewFile,BufRead *.ly,*.ily^I^Isetf lilypond[J

line 1103: [J

line 1104: " Lisp (*.el = ELisp, *.cl = Common Lisp)[J

line 1105: " *.jl was removed, it's also used for Julia, better skip than guess wrong.[J

line 1106: if has("fname_case")[J

line 1107:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,*.L,.emacs,.sawfishrc setf lisp[J

line 1108: else[J

line 1109:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,.emacs,.sawfishrc setf lisp[J

line 1110: endif[J

line 1111: [J

line 1112: " SBCL implementation of Common Lisp[J

line 1113: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp[J

line 1114: [J

line 1115: " Liquid[J

line 1116: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid[J

line 1117: [J

line 1118: " Lite[J

line 1119: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite[J

line 1120: [J

line 1121: " LiteStep RC files[J

line 1122: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep[J

line 1123: [J

line 1124: " Login access[J

line 1125: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess[J

line 1126: [J

line 1127: " Login defs[J

line 1128: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs[J

line 1129: [J

line 1130: " Logtalk[J

line 1131: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk[J

line 1132: [J

line 1133: " LOTOS[J

line 1134: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos[J

line 1135: [J

line 1136: " Lout (also: *.lt)[J

line 1137: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout[J

line 1138: [J

line 1139: " Lua[J

line 1140: au BufNewFile,BufRead *.lua^I^I^Isetf lua[J

line 1141: [J

line 1142: " Luacheck[J

line 1143: au BufNewFile,BufRead .luacheckrc^I^Isetf lua[J

line 1144: [J

line 1145: " Luarocks[J

line 1146: au BufNewFile,BufRead *.rockspec^I^Isetf lua[J

line 1147: [J

line 1148: " Linden Scripting Language (Second Life)[J

line 1149: au BufNewFile,BufRead *.lsl^I^I^Icall dist#ft#FTlsl()[J

line 1150: [J

line 1151: " Lynx style file (or LotusScript!)[J

line 1152: au BufNewFile,BufRead *.lss^I^I^Isetf lss[J

line 1153: [J

line 1154: " M4[J

line 1155: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif[J

line 1157: [J

line 1158: " MaGic Point[J

line 1159: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp[J

line 1160: [J

line 1161: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)[J

line 1162: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail[J

line 1163: [J

line 1164: " Mail aliases[J

line 1165: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases[J

line 1166: [J

line 1167: " Mailcap configuration file[J

line 1168: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap[J

line 1169: [J

line 1170: " Makefile[J

line 1171: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make[J

line 1172: [J

line 1173: " MakeIndex[J

line 1174: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist[J

line 1175: [J

line 1176: " Mallard[J

line 1177: au BufNewFile,BufRead *.page^I^I^Isetf mallard[J

line 1178: [J

line 1179: " Manpage[J

line 1180: au BufNewFile,BufRead *.man^I^I^Isetf man[J

line 1181: [J

line 1182: " Man config[J

line 1183: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf[J

line 1184: [J

line 1185: " Maple V[J

line 1186: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple[J

line 1187: [J

line 1188: " Map (UMN mapserver config file)[J

line 1189: au BufNewFile,BufRead *.map^I^I^Isetf map[J

line 1190: [J

line 1191: " Markdown[J

line 1192: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown[J

line 1193: [J

line 1194: " Mason[J

line 1195: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason[J

line 1196: [J

line 1197: " Mathematica, Matlab, Murphi, Objective C or Octave[J

line 1198: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()[J

line 1199: [J

line 1200: " Mathematica notebook[J

line 1201: au BufNewFile,BufRead *.nb^I^I^Isetf mma[J

line 1202: [J

line 1203: " Maya Extension Language[J

line 1204: au BufNewFile,BufRead *.mel^I^I^Isetf mel[J

line 1205: [J

line 1206: " Mercurial (hg) commit file[J

line 1207: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit[J

line 1208: [J

line 1209: " Mercurial config (looks like generic config file)[J

line 1210: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg[J

line 1211: [J

line 1212: " Mermaid[J

line 1213: au BufNewFile,BufRead *.mmd,*.mmdc,*.mermaid^Isetf mermaid[J

line 1214: [J

line 1215: " Meson Build system config[J

line 1216: au BufNewFile,BufRead meson.build,meson_options.txt setf meson[J

line 1217: au BufNewFile,BufRead *.wrap^I^I^Isetf dosini[J

line 1218: [J

line 1219: " Messages (logs mostly)[J

line 1220: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages[J

line 1221: [J

line 1222: " Metafont[J

line 1223: au BufNewFile,BufRead *.mf^I^I^Isetf mf[J

line 1224: [J

line 1225: " MetaPost[J

line 1226: au BufNewFile,BufRead *.mp^I^I^Isetf mp[J

line 1227: au BufNewFile,BufRead *.mpxl,*.mpiv,*.mpvi^Ilet b:mp_metafun = 1 | setf mp[J

line 1228: [J

line 1229: " MGL[J

line 1230: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl[J

line 1231: [J

line 1232: " MIX - Knuth assembly[J

line 1233: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix[J

line 1234: [J

line 1235: " MMIX or VMS makefile[J

line 1236: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()[J

line 1237: [J

line 1238: " Symbian meta-makefile definition (MMP)[J

line 1239: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp[J

line 1240: [J

line 1241: " ABB Rapid, Modula-2, Modsim III or LambdaProlog[J

line 1242: au BufNewFile,BufRead *.mod\c^I^I^Icall dist#ft#FTmod()[J

line 1243: [J

line 1244: " Modula-2  (.md removed in favor of Markdown, see dist#ft#FTmod for *.MOD)[J

line 1245: au BufNewFile,BufRead *.m2,*.DEF,*.mi^I^Isetf modula2[J

line 1246: [J

line 1247: " Modula-3 (.m3, .i3, .mg, .ig)[J

line 1248: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3[J

line 1249: [J

line 1250: " Larch/Modula-3[J

line 1251: au BufNewFile,BufRead *.lm3^I^I^Isetf modula3[J

line 1252: [J

line 1253: " Monk[J

line 1254: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk[J

line 1255: [J

line 1256: " MOO[J

line 1257: au BufNewFile,BufRead *.moo^I^I^Isetf moo[J

line 1258: [J

line 1259: " Moonscript[J

line 1260: au BufNewFile,BufRead *.moon^I^I^Isetf moonscript[J

line 1261: [J

line 1262: " Modconf[J

line 1263: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf[J

line 1264: [J

line 1265: " MPD is based on XML[J

line 1266: au BufNewFile,BufRead *.mpd^I^I^Isetf xml[J

line 1267: [J

line 1268: " Mplayer config[J

line 1269: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf[J

line 1270: [J

line 1271: " Motorola S record[J

line 1272: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec[J

line 1273: [J

line 1274: " Mrxvtrc[J

line 1275: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc[J

line 1276: [J

line 1277: " Msql[J

line 1278: au BufNewFile,BufRead *.msql^I^I^Isetf msql[J

line 1279: [J

line 1280: " Mysql[J

line 1281: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql[J

line 1282: [J

line 1283: " Tcl Shell RC file[J

line 1284: au BufNewFile,BufRead tclsh.rc^I^I^Isetf tcl[J

line 1285: [J

line 1286: " M$ Resource files[J

line 1287: " /etc/Muttrc.d/file.rc is muttrc[J

line 1288: au BufNewFile,BufRead *.rc,*.rch if expand("<afile>") !~ "/etc/Muttrc.d/" |   setf rc | endif[J

line 1292: [J

line 1293: " MuPAD source[J

line 1294: au BufRead,BufNewFile *.mu^I^I^Isetf mupad[J

line 1295: [J

line 1296: " Mush[J

line 1297: au BufNewFile,BufRead *.mush^I^I^Isetf mush[J

line 1298: [J

line 1299: " Mutt setup file (also for Muttng)[J

line 1300: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc[J

line 1301: [J

line 1302: " N1QL[J

line 1303: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql[J

line 1304: [J

line 1305: " Nano[J

line 1306: au BufNewFile,BufRead */etc/nanorc,*.nanorc^Isetf nanorc[J

line 1307: [J

line 1308: " Nastran input/DMAP[J

line 1309: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran[J

line 1310: [J

line 1311: " Natural[J

line 1312: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural[J

line 1313: [J

line 1314: " Noemutt setup file[J

line 1315: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc[J

line 1316: [J

line 1317: " Netrc[J

line 1318: au BufNewFile,BufRead .netrc^I^I^Isetf netrc[J

line 1319: [J

line 1320: " Nginx[J

line 1321: au BufNewFile,BufRead *.nginx,nginx*.conf,*nginx.conf,*/etc/nginx/*,*/usr/local/nginx/conf/*,*/nginx/*.conf^I^I^Isetf nginx[J

line 1322: [J

line 1323: " Nim file[J

line 1324: au BufNewFile,BufRead *.nim,*.nims,*.nimble^Isetf nim[J

line 1325: [J

line 1326: " Ninja file[J

line 1327: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja[J

line 1328: [J

line 1329: " Nix[J

line 1330: au BufRead,BufNewFile *.nix^I^I^Isetf nix[J

line 1331: [J

line 1332: " NPM RC file[J

line 1333: au BufNewFile,BufRead npmrc,.npmrc^I^Isetf dosini[J

line 1334: [J

line 1335: " Novell netware batch files[J

line 1336: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf[J

line 1337: [J

line 1338: " Nroff/Troff (*.ms and *.t are checked below)[J

line 1339: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif[J

line 1343: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff[J

line 1344: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()[J

line 1345: [J

line 1346: " Nroff or Objective C++[J

line 1347: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()[J

line 1348: [J

line 1349: " Not Quite C[J

line 1350: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc[J

line 1351: [J

line 1352: " NSE - Nmap Script Engine - uses Lua syntax[J

line 1353: au BufNewFile,BufRead *.nse^I^I^Isetf lua[J

line 1354: [J

line 1355: " NSIS[J

line 1356: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis[J

line 1357: [J

line 1358: " Oblivion Language and Oblivion Script Extender[J

line 1359: au BufNewFile,BufRead *.obl,*.obse,*.oblivion,*.obscript  setf obse[J

line 1360: [J

line 1361: " OCaml[J

line 1362: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo setf ocaml[J

line 1363: [J

line 1364: " Occam[J

line 1365: au BufNewFile,BufRead *.occ^I^I^Isetf occam[J

line 1366: [J

line 1367: " Octave[J

line 1368: au BufNewFile,BufRead octave.conf,.octaverc,octaverc^Isetf octave[J

line 1369: [J

line 1370: " Omnimark[J

line 1371: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark[J

line 1372: [J

line 1373: " OPAM[J

line 1374: au BufNewFile,BufRead opam,*.opam,*.opam.template setf opam[J

line 1375: [J

line 1376: " OpenFOAM[J

line 1377: au BufNewFile,BufRead [a-zA-Z0-9]*Dict\(.*\)\=,[a-zA-Z]*Properties\(.*\)\=,*Transport\(.*\),fvSchemes,fvSolution,fvConstrains,fvModels,*/constant/g,*/0\(\.orig\)\=/* call dist#ft#FTfoam()[J

line 1378: [J

line 1379: " OpenROAD[J

line 1380: au BufNewFile,BufRead *.or^I^I^I^Isetf openroad[J

line 1381: [J

line 1382: " OPL[J

line 1383: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^I^Isetf opl[J

line 1384: [J

line 1385: " OpenSCAD[J

line 1386: au BufNewFile,BufRead *.scad^I^I^I^Isetf openscad[J

line 1387: [J

line 1388: " Oracle config file[J

line 1389: au BufNewFile,BufRead *.ora^I^I^I^Isetf ora[J

line 1390: [J

line 1391: " Org[J

line 1392: au BufNewFile,BufRead *.org,*.org_archive^I^Isetf org[J

line 1393: [J

line 1394: " Packet filter conf[J

line 1395: au BufNewFile,BufRead pf.conf^I^I^I^Isetf pf[J

line 1396: [J

line 1397: " ini style config files, using # comments[J

line 1398: au BufNewFile,BufRead */etc/pacman.conf,mpv.conf^Isetf confini[J

line 1399: au BufNewFile,BufRead */.aws/config,*/.aws/credentials^Isetf confini[J

line 1400: [J

line 1401: " Pacman hooks[J

line 1402: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf conf | endif[J

line 1406: [J

line 1407: " Pam conf[J

line 1408: au BufNewFile,BufRead */etc/pam.conf^I^I^Isetf pamconf[J

line 1409: [J

line 1410: " Pam environment[J

line 1411: au BufNewFile,BufRead pam_env.conf,.pam_environment^Isetf pamenv[J

line 1412: [J

line 1413: " PApp[J

line 1414: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^I^Isetf papp[J

line 1415: [J

line 1416: " Password file[J

line 1417: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd[J

line 1418: [J

line 1419: " Pascal (also *.p, *.pp, *.inc)[J

line 1420: au BufNewFile,BufRead *.pas^I^I^I^Isetf pascal[J

line 1421: [J

line 1422: " Pascal or Puppet manifest[J

line 1423: au BufNewFile,BufRead *.pp^I^I^I^Icall dist#ft#FTpp()[J

line 1424: [J

line 1425: " Delphi or Lazarus program file[J

line 1426: au BufNewFile,BufRead *.dpr,*.lpr^I^I^Isetf pascal[J

line 1427: [J

line 1428: " Free Pascal makefile definition file[J

line 1429: au BufNewFile,BufRead *.fpc^I^I^I^Isetf fpcmake[J

line 1430: [J

line 1431: " Path of Exile item filter[J

line 1432: au BufNewFile,BufRead *.filter^I^I^I^Isetf poefilter[J

line 1433: [J

line 1434: " PDF[J

line 1435: au BufNewFile,BufRead *.pdf^I^I^I^Isetf pdf[J

line 1436: [J

line 1437: " PCMK - HAE - crm configure edit[J

line 1438: au BufNewFile,BufRead *.pcmk^I^I^I^Isetf pcmk[J

line 1439: [J

line 1440: " Perl[J

line 1441: if has("fname_case")[J

line 1442:   au BufNewFile,BufRead *.pl,*.PL^I^I^Icall dist#ft#FTpl()[J

line 1443: else[J

line 1444:   au BufNewFile,BufRead *.pl^I^I^I^Icall dist#ft#FTpl()[J

line 1445: endif[J

line 1446: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^I^Isetf perl[J

line 1447: [J

line 1448: " Perl, XPM or XPM2[J

line 1449: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif[J

line 1457: [J

line 1458: " Perl POD[J

line 1459: au BufNewFile,BufRead *.pod^I^I^Isetf pod[J

line 1460: [J

line 1461: " Php, php3, php4, etc.[J

line 1462: " Also Phtml (was used for PHP 2 in the past).[J

line 1463: " Also .ctp for Cake template file.[J

line 1464: " Also .phpt for php tests.[J

line 1465: " Also .theme for Drupal theme files.[J

line 1466: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp,*.phpt,*.theme^Isetf php[J

line 1467: [J

line 1468: " PHP config[J

line 1469: au BufNewFile,BufRead php.ini-*^I^I^Isetf dosini[J

line 1470: [J

line 1471: " Pike and Cmod[J

line 1472: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike[J

line 1473: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod[J

line 1474: [J

line 1475: " Pinfo config[J

line 1476: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo[J

line 1477: [J

line 1478: " Palm Resource compiler[J

line 1479: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc[J

line 1480: [J

line 1481: " Pine config[J

line 1482: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine[J

line 1483: [J

line 1484: " Pipenv Pipfiles[J

line 1485: au BufNewFile,BufRead Pipfile^I^I^Isetf toml[J

line 1486: au BufNewFile,BufRead Pipfile.lock^I^Isetf json[J

line 1487: [J

line 1488: " PL/1, PL/I[J

line 1489: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli[J

line 1490: [J

line 1491: " PL/M (also: *.inp)[J

line 1492: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm[J

line 1493: [J

line 1494: " PL/SQL[J

line 1495: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql[J

line 1496: [J

line 1497: " PLP[J

line 1498: au BufNewFile,BufRead *.plp^I^I^Isetf plp[J

line 1499: [J

line 1500: " PO and PO template (GNU gettext)[J

line 1501: au BufNewFile,BufRead *.po,*.pot^I^Isetf po[J

line 1502: [J

line 1503: " Postfix main config[J

line 1504: au BufNewFile,BufRead main.cf,main.cf.proto^Isetf pfmain[J

line 1505: [J

line 1506: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)[J

line 1507: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr[J

line 1508: [J

line 1509: " PostScript Printer Description[J

line 1510: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd[J

line 1511: [J

line 1512: " Povray[J

line 1513: au BufNewFile,BufRead *.pov^I^I^Isetf pov[J

line 1514: [J

line 1515: " Povray configuration[J

line 1516: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini[J

line 1517: [J

line 1518: " Povray, Pascal, PHP or assembly[J

line 1519: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()[J

line 1520: [J

line 1521: " PowerShell[J

line 1522: au BufNewFile,BufRead^I*.ps1,*.psd1,*.psm1,*.pssc^Isetf ps1[J

line 1523: au BufNewFile,BufRead^I*.ps1xml^I^I^Isetf ps1xml[J

line 1524: au BufNewFile,BufRead^I*.cdxml,*.psc1^I^I^Isetf xml[J

line 1525: [J

line 1526: " Printcap and Termcap[J

line 1527: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap[J

line 1529: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap[J

line 1531: [J

line 1532: " Prisma[J

line 1533: au BufRead,BufNewFile *.prisma^I^I^Isetf prisma[J

line 1534: [J

line 1535: " PCCTS / ANTLR[J

line 1536: "au BufNewFile,BufRead *.g^I^I^Isetf antlr[J

line 1537: au BufNewFile,BufRead *.g^I^I^Isetf pccts[J

line 1538: [J

line 1539: " PPWizard[J

line 1540: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz[J

line 1541: [J

line 1542: " Pug[J

line 1543: au BufRead,BufNewFile *.pug^I^I^Isetf pug[J

line 1544: [J

line 1545: " Puppet[J

line 1546: au BufNewFile,BufRead Puppetfile^I^Isetf ruby[J

line 1547: [J

line 1548: " Embedded Puppet[J

line 1549: au BufNewFile,BufRead *.epp^I^I^Isetf epuppet[J

line 1550: [J

line 1551: " Obj 3D file format[J

line 1552: " TODO: is there a way to avoid MS-Windows Object files?[J

line 1553: au BufNewFile,BufRead *.obj^I^I^Isetf obj[J

line 1554: [J

line 1555: " Oracle Pro*C/C++[J

line 1556: au BufNewFile,BufRead *.pc^I^I^Isetf proc[J

line 1557: [J

line 1558: " Privoxy actions file[J

line 1559: au BufNewFile,BufRead *.action^I^I^Isetf privoxy[J

line 1560: [J

line 1561: " Procmail[J

line 1562: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail[J

line 1563: [J

line 1564: " Progress or CWEB[J

line 1565: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()[J

line 1566: [J

line 1567: " Progress or assembly[J

line 1568: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()[J

line 1569: [J

line 1570: " Progress or Pascal[J

line 1571: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()[J

line 1572: [J

line 1573: " Software Distributor Product Specification File (POSIX 1387.2-1995)[J

line 1574: au BufNewFile,BufRead *.psf^I^I^Isetf psf[J

line 1575: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif[J

line 1579: [J

line 1580: " Prolog[J

line 1581: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog[J

line 1582: [J

line 1583: " Promela[J

line 1584: au BufNewFile,BufRead *.pml^I^I^Isetf promela[J

line 1585: [J

line 1586: " Property Specification Language (PSL)[J

line 1587: au BufNewFile,BufRead *.psl^I^I^Isetf psl[J

line 1588: [J

line 1589: " Google protocol buffers[J

line 1590: au BufNewFile,BufRead *.proto^I^I^Isetf proto[J

line 1591: au BufNewFile,BufRead *.pbtxt^I^I^Isetf pbtxt[J

line 1592: [J

line 1593: " Poke[J

line 1594: au BufNewFile,BufRead *.pk^I^I^Isetf poke[J

line 1595: [J

line 1596: " Protocols[J

line 1597: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols[J

line 1598: [J

line 1599: " Pyret[J

line 1600: au BufNewFile,BufRead *.arr^I^I^Isetf pyret[J

line 1601: [J

line 1602: " Pyrex[J

line 1603: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex[J

line 1604: [J

line 1605: " Python, Python Shell Startup and Python Stub Files[J

line 1606: " Quixote (Python-based web framework)[J

line 1607: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc  setf python[J

line 1608: au BufNewFile,BufRead *.ptl,*.pyi,SConstruct^I^I   setf python[J

line 1609: [J

line 1610: " QL[J

line 1611: au BufRead,BufNewFile *.ql,*.qll^I^Isetf ql[J

line 1612: [J

line 1613: " Quarto[J

line 1614: au BufRead,BufNewFile *.qmd     setf quarto[J

line 1615: [J

line 1616: " Radiance[J

line 1617: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance[J

line 1618: [J

line 1619: " Raku (formerly Perl6)[J

line 1620: au BufNewFile,BufRead *.pm6,*.p6,*.t6,*.pod6,*.raku,*.rakumod,*.rakudoc,*.rakutest  setf raku[J

line 1621: [J

line 1622: " Ratpoison config/command files[J

line 1623: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison[J

line 1624: [J

line 1625: " RCS file[J

line 1626: au BufNewFile,BufRead *\,v^I^I^Isetf rcs[J

line 1627: [J

line 1628: " Readline[J

line 1629: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline[J

line 1630: [J

line 1631: " Registry for MS-Windows[J

line 1632: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif[J

line 1634: [J

line 1635: " Renderman Interface Bytestream[J

line 1636: au BufNewFile,BufRead *.rib^I^I^Isetf rib[J

line 1637: [J

line 1638: " Rego Policy Language[J

line 1639: au BufNewFile,BufRead *.rego^I^I^Isetf rego[J

line 1640: [J

line 1641: " Rexx[J

line 1642: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx[J

line 1643: [J

line 1644: " R Help file[J

line 1645: if has("fname_case")[J

line 1646:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp[J

line 1647: else[J

line 1648:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp[J

line 1649: endif[J

line 1650: [J

line 1651: " R noweb file[J

line 1652: if has("fname_case")[J

line 1653:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb[J

line 1654: else[J

line 1655:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb[J

line 1656: endif[J

line 1657: [J

line 1658: " R Markdown file[J

line 1659: if has("fname_case")[J

line 1660:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd[J

line 1661: else[J

line 1662:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd[J

line 1663: endif[J

line 1664: [J

line 1665: " R profile file[J

line 1666: au BufNewFile,BufRead .Rprofile,Rprofile,Rprofile.site^Isetf r[J

line 1667: [J

line 1668: " RSS looks like XML[J

line 1669: au BufNewFile,BufRead *.rss^I^I^I^Isetf xml[J

line 1670: [J

line 1671: " R reStructuredText file[J

line 1672: if has("fname_case")[J

line 1673:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst[J

line 1674: else[J

line 1675:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst[J

line 1676: endif[J

line 1677: [J

line 1678: " Rexx, Rebol or R[J

line 1679: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()[J

line 1680: [J

line 1681: " Remind[J

line 1682: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind[J

line 1683: [J

line 1684: " ReScript[J

line 1685: au BufNewFile,BufRead *.res,*.resi^I^I^Isetf rescript[J

line 1686: [J

line 1687: " Resolv.conf[J

line 1688: au BufNewFile,BufRead resolv.conf^I^Isetf resolv[J

line 1689: [J

line 1690: " Relax NG Compact[J

line 1691: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc[J

line 1692: [J

line 1693: " Relax NG XML[J

line 1694: au BufNewFile,BufRead *.rng^I^I^Isetf rng[J

line 1695: [J

line 1696: " RPL/2[J

line 1697: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl[J

line 1698: [J

line 1699: " Robot Framework[J

line 1700: au BufNewFile,BufRead *.robot,*.resource^Isetf robot[J

line 1701: [J

line 1702: " Robots.txt[J

line 1703: au BufNewFile,BufRead robots.txt^I^Isetf robots[J

line 1704: [J

line 1705: " Rpcgen[J

line 1706: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen[J

line 1707: [J

line 1708: " MikroTik RouterOS script[J

line 1709: au BufRead,BufNewFile *.rsc^I^I^Isetf routeros[J

line 1710: [J

line 1711: " reStructuredText Documentation Format[J

line 1712: au BufNewFile,BufRead *.rst^I^I^Isetf rst[J

line 1713: [J

line 1714: " RTF[J

line 1715: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf[J

line 1716: [J

line 1717: " Interactive Ruby shell[J

line 1718: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby[J

line 1719: [J

line 1720: " Ruby[J

line 1721: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby[J

line 1722: [J

line 1723: " RubyGems[J

line 1724: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby[J

line 1725: [J

line 1726: " RBS (Ruby Signature)[J

line 1727: au BufNewFile,BufRead *.rbs^I^I^Isetf rbs[J

line 1728: [J

line 1729: " Rackup[J

line 1730: au BufNewFile,BufRead *.ru^I^I^Isetf ruby[J

line 1731: [J

line 1732: " Bundler[J

line 1733: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby[J

line 1734: [J

line 1735: " Ruby on Rails[J

line 1736: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby[J

line 1737: [J

line 1738: " Rantfile and Rakefile is like Ruby[J

line 1739: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby[J

line 1740: [J

line 1741: " Rust[J

line 1742: au BufNewFile,BufRead *.rs^I^I^Isetf rust[J

line 1743: au BufNewFile,BufRead Cargo.lock,*/.cargo/config,*/.cargo/credentials^Isetf toml[J

line 1744: [J

line 1745: " S-lang (or shader language, or SmallLisp)[J

line 1746: au BufNewFile,BufRead *.sl^I^I^Isetf slang[J

line 1747: [J

line 1748: " Samba config[J

line 1749: au BufNewFile,BufRead smb.conf^I^I^Isetf samba[J

line 1750: [J

line 1751: " SAS script[J

line 1752: au BufNewFile,BufRead *.sas^I^I^Isetf sas[J

line 1753: [J

line 1754: " Sass[J

line 1755: au BufNewFile,BufRead *.sass^I^I^Isetf sass[J

line 1756: [J

line 1757: " Sather[J

line 1758: au BufNewFile,BufRead *.sa^I^I^Isetf sather[J

line 1759: [J

line 1760: " Scala[J

line 1761: au BufNewFile,BufRead *.scala^I^I^Isetf scala[J

line 1762: [J

line 1763: " SBT - Scala Build Tool[J

line 1764: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt[J

line 1765: [J

line 1766: " SuperCollider[J

line 1767: au BufNewFile,BufRead *.sc^I^I^Icall dist#ft#FTsc()[J

line 1768: [J

line 1769: au BufNewFile,BufRead *.quark^I^I^Isetf supercollider[J

line 1770: [J

line 1771: " scdoc[J

line 1772: au BufNewFile,BufRead *.scd^I^I^Icall dist#ft#FTscd()[J

line 1773: [J

line 1774: " Scilab[J

line 1775: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab[J

line 1776: [J

line 1777: [J

line 1778: " SCSS[J

line 1779: au BufNewFile,BufRead *.scss^I^I^Isetf scss[J

line 1780: [J

line 1781: " SD: Streaming Descriptors[J

line 1782: au BufNewFile,BufRead *.sd^I^I^Isetf sd[J

line 1783: [J

line 1784: " SDL[J

line 1785: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl[J

line 1786: [J

line 1787: " sed[J

line 1788: au BufNewFile,BufRead *.sed^I^I^Isetf sed[J

line 1789: [J

line 1790: " SubRip[J

line 1791: au BufNewFile,BufRead *.srt^I^I^Isetf srt[J

line 1792: [J

line 1793: " SubStation Alpha[J

line 1794: au BufNewFile,BufRead *.ass,*.ssa^I^Isetf ssa[J

line 1795: [J

line 1796: " svelte[J

line 1797: au BufNewFile,BufRead *.svelte^I^I^Isetf svelte[J

line 1798: [J

line 1799: " Sieve (RFC 3028, 5228)[J

line 1800: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve[J

line 1801: [J

line 1802: " Sendmail[J

line 1803: au BufNewFile,BufRead sendmail.cf^I^Isetf sm[J

line 1804: [J

line 1805: " Sendmail .mc files are actually m4.  Could also be MS Message text file or[J

line 1806: " Maxima.[J

line 1807: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()[J

line 1808: [J

line 1809: " Services[J

line 1810: au BufNewFile,BufRead */etc/services^I^Isetf services[J

line 1811: [J

line 1812: " Service Location config[J

line 1813: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf[J

line 1814: [J

line 1815: " Service Location registration[J

line 1816: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg[J

line 1817: [J

line 1818: " Service Location SPI[J

line 1819: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi[J

line 1820: [J

line 1821: " Setserial config[J

line 1822: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial[J

line 1823: [J

line 1824: " SGML[J

line 1825: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif[J

line 1835: [J

line 1836: " SGMLDECL[J

line 1837: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif[J

line 1841: [J

line 1842: " SGML catalog file[J

line 1843: au BufNewFile,BufRead catalog^I^I^Isetf catalog[J

line 1844: [J

line 1845: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.[J

line 1846: " Gentoo ebuilds, Arch Linux PKGBUILDs and Alpine Linux APKBUILDs are actually[J

line 1847: " bash scripts.[J

line 1848: " NOTE: Patterns ending in a star are further down, these have lower priority.[J

line 1849: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.ebuild,*.bash,*.eclass,PKGBUILD,APKBUILD call dist#ft#SetFileTypeSH("bash")[J

line 1850: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")[J

line 1851: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))[J

line 1852: [J

line 1853: " Shell script (Arch Linux) or PHP file (Drupal)[J

line 1854: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif[J

line 1860: [J

line 1861: " tcsh scripts (patterns ending in a star further below)[J

line 1862: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")[J

line 1863: [J

line 1864: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)[J

line 1865: " (patterns ending in a start further below)[J

line 1866: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()[J

line 1867: [J

line 1868: " Zig and Zir (Zig Intermediate Representation)[J

line 1869: au BufNewFile,BufRead *.zig^I^I^Isetf zig[J

line 1870: au BufNewFile,BufRead *.zir^I^I^Isetf zir[J

line 1871: [J

line 1872: " Z-Shell script (patterns ending in a star further below)[J

line 1873: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh[J

line 1874: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh[J

line 1875: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh[J

line 1876: [J

line 1877: " Scheme[J

line 1878: au BufNewFile,BufRead *.scm,*.ss,*.sld,*.rkt,*.rktd,*.rktl^Isetf scheme[J

line 1879: [J

line 1880: " Screen RC[J

line 1881: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen[J

line 1882: [J

line 1883: " Sexplib[J

line 1884: au BufNewFile,BufRead *.sexp setf sexplib[J

line 1885: [J

line 1886: " Simula[J

line 1887: au BufNewFile,BufRead *.sim^I^I^Isetf simula[J

line 1888: [J

line 1889: " SINDA[J

line 1890: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda[J

line 1891: [J

line 1892: " SiSU[J

line 1893: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu[J

line 1894: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu[J

line 1895: [J

line 1896: " SKILL[J

line 1897: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill[J

line 1898: [J

line 1899: " SLRN[J

line 1900: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc[J

line 1901: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc[J

line 1902: [J

line 1903: " Smali[J

line 1904: au BufNewFile,BufRead *.smali^I^I^Isetf smali[J

line 1905: [J

line 1906: " Smalltalk[J

line 1907: au BufNewFile,BufRead *.st^I^I^Isetf st[J

line 1908: [J

line 1909: " Smalltalk (and Rexx, TeX, and Visual Basic)[J

line 1910: au BufNewFile,BufRead *.cls^I^I^Icall dist#ft#FTcls()[J

line 1911: [J

line 1912: " Smarty templates[J

line 1913: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty[J

line 1914: [J

line 1915: " SMIL or XML[J

line 1916: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif[J

line 1922: [J

line 1923: " SMIL or SNMP MIB file[J

line 1924: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif[J

line 1930: [J

line 1931: " SMITH[J

line 1932: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith[J

line 1933: [J

line 1934: " Smithy[J

line 1935: au BufNewFile,BufRead *.smithy^I^I^Isetf smithy[J

line 1936: [J

line 1937: " Snobol4 and spitbol[J

line 1938: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4[J

line 1939: [J

line 1940: " SNMP MIB files[J

line 1941: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib[J

line 1942: [J

line 1943: " Snort Configuration[J

line 1944: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog[J

line 1945: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()[J

line 1946: [J

line 1947: " Solidity[J

line 1948: au BufRead,BufNewFile *.sol^I^I^Isetf solidity[J

line 1949: [J

line 1950: " SPARQL queries[J

line 1951: au BufNewFile,BufRead *.rq,*.sparql^I^Isetf sparql[J

line 1952: [J

line 1953: " Spec (Linux RPM)[J

line 1954: au BufNewFile,BufRead *.spec^I^I^Isetf spec[J

line 1955: [J

line 1956: " Speedup (AspenTech plant simulator)[J

line 1957: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup[J

line 1958: [J

line 1959: " Slice[J

line 1960: au BufNewFile,BufRead *.ice^I^I^Isetf slice[J

line 1961: [J

line 1962: " Microsoft Visual Studio Solution[J

line 1963: au BufNewFile,BufRead *.sln^I^I^Isetf solution[J

line 1964: au BufNewFile,BufRead *.slnf^I^I^Isetf json[J

line 1965: [J

line 1966: " Spice[J

line 1967: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice[J

line 1968: [J

line 1969: " Spyce[J

line 1970: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce[J

line 1971: [J

line 1972: " Squid[J

line 1973: au BufNewFile,BufRead squid.conf^I^Isetf squid[J

line 1974: [J

line 1975: " SQL for Oracle Designer[J

line 1976: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql[J

line 1977: [J

line 1978: " SQL[J

line 1979: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()[J

line 1980: [J

line 1981: " SQLJ[J

line 1982: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj[J

line 1983: [J

line 1984: " SQR[J

line 1985: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr[J

line 1986: [J

line 1987: " Squirrel[J

line 1988: au BufNewFile,BufRead *.nut^I^I^Isetf squirrel[J

line 1989: [J

line 1990: " OpenSSH configuration[J

line 1991: au BufNewFile,BufRead ssh_config,*/.ssh/config,*/.ssh/*.conf^Isetf sshconfig[J

line 1992: au BufNewFile,BufRead */etc/ssh/ssh_config.d/*.conf^I^Isetf sshconfig[J

line 1993: [J

line 1994: " OpenSSH server configuration[J

line 1995: au BufNewFile,BufRead sshd_config^I^I^Isetf sshdconfig[J

line 1996: au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf^Isetf sshdconfig[J

line 1997: [J

line 1998: " OpenVPN configuration[J

line 1999: au BufNewFile,BufRead *.ovpn^I^I^Isetf openvpn[J

line 2000: au BufNewFile,BufRead */openvpn/*/*.conf^Isetf openvpn[J

line 2001: [J

line 2002: " Stata[J

line 2003: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata[J

line 2004: " Also *.class, but not when it's a Java bytecode file[J

line 2005: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif[J

line 2007: [J

line 2008: " SMCL[J

line 2009: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl[J

line 2010: [J

line 2011: " Stored Procedures[J

line 2012: au BufNewFile,BufRead *.stp^I^I^Isetf stp[J

line 2013: [J

line 2014: " Standard ML[J

line 2015: au BufNewFile,BufRead *.sml^I^I^Isetf sml[J

line 2016: [J

line 2017: " Sratus VOS command macro[J

line 2018: au BufNewFile,BufRead *.cm^I^I^Isetf voscm[J

line 2019: [J

line 2020: " Swift[J

line 2021: au BufNewFile,BufRead *.swift^I^I^Isetf swift[J

line 2022: au BufNewFile,BufRead *.swift.gyb^I^Isetf swiftgyb[J

line 2023: [J

line 2024: " Swift Intermediate Language or SILE[J

line 2025: au BufNewFile,BufRead *.sil^I^I^Icall dist#ft#FTsil()[J

line 2026: [J

line 2027: " Sysctl[J

line 2028: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl[J

line 2029: [J

line 2030: " Systemd unit files[J

line 2031: au BufNewFile,BufRead */systemd/*.{automount,dnssd,link,mount,netdev,network,nspawn,path,service,slice,socket,swap,target,timer}^Isetf systemd[J

line 2032: " Systemd overrides[J

line 2033: au BufNewFile,BufRead */etc/systemd/*.conf.d/*.conf^Isetf systemd[J

line 2034: au BufNewFile,BufRead */etc/systemd/system/*.d/*.conf^Isetf systemd[J

line 2035: au BufNewFile,BufRead */.config/systemd/user/*.d/*.conf^Isetf systemd[J

line 2036: " Systemd temp files[J

line 2037: au BufNewFile,BufRead */etc/systemd/system/*.d/.#*^Isetf systemd[J

line 2038: au BufNewFile,BufRead */etc/systemd/system/.#*^I^Isetf systemd[J

line 2039: au BufNewFile,BufRead */.config/systemd/user/*.d/.#*^Isetf systemd[J

line 2040: au BufNewFile,BufRead */.config/systemd/user/.#*^Isetf systemd[J

line 2041: [J

line 2042: " Synopsys Design Constraints[J

line 2043: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc[J

line 2044: [J

line 2045: " Sudoers[J

line 2046: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers[J

line 2047: [J

line 2048: " SVG (Scalable Vector Graphics)[J

line 2049: au BufNewFile,BufRead *.svg^I^I^Isetf svg[J

line 2050: [J

line 2051: " Surface[J

line 2052: au BufRead,BufNewFile *.sface^I^I^Isetf surface[J

line 2053: [J

line 2054: " Tads (or Nroff or Perl test file)[J

line 2055: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif[J

line 2057: [J

line 2058: " Tags[J

line 2059: au BufNewFile,BufRead tags^I^I^Isetf tags[J

line 2060: [J

line 2061: " TAK[J

line 2062: au BufNewFile,BufRead *.tak^I^I^Isetf tak[J

line 2063: [J

line 2064: " Task[J

line 2065: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata[J

line 2066: au BufRead,BufNewFile *.task^I^I^Isetf taskedit[J

line 2067: [J

line 2068: " Tcl (JACL too)[J

line 2069: au BufNewFile,BufRead *.tcl,*.tm,*.tk,*.itcl,*.itk,*.jacl,.tclshrc,.wishrc^Isetf tcl[J

line 2070: [J

line 2071: " Teal[J

line 2072: au BufRead,BufNewFile *.tl^I^I^Isetf teal[J

line 2073: [J

line 2074: " TealInfo[J

line 2075: au BufNewFile,BufRead *.tli^I^I^Isetf tli[J

line 2076: [J

line 2077: " Telix Salt[J

line 2078: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt[J

line 2079: [J

line 2080: " Tera Term Language or Turtle[J

line 2081: au BufRead,BufNewFile *.ttl if getline(1) =~ '^@\?\(prefix\|base\)' |   setf turtle | else |   setf teraterm | endif[J

line 2087: [J

line 2088: " Terminfo[J

line 2089: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo[J

line 2090: [J

line 2091: " Terraform variables[J

line 2092: au BufRead,BufNewFile *.tfvars^I^I^Isetf terraform-vars[J

line 2093: [J

line 2094: " TeX[J

line 2095: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex[J

line 2096: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()[J

line 2097: [J

line 2098: " ConTeXt[J

line 2099: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi,*.mkxl,*.mklx   setf context[J

line 2100: [J

line 2101: " Texinfo[J

line 2102: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo[J

line 2103: [J

line 2104: " TeX configuration[J

line 2105: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf[J

line 2106: [J

line 2107: " Tidy config[J

line 2108: au BufNewFile,BufRead .tidyrc,tidyrc,tidy.conf^Isetf tidy[J

line 2109: [J

line 2110: " TF mud client[J

line 2111: au BufNewFile,BufRead .tfrc,tfrc^I^Isetf tf[J

line 2112: [J

line 2113: " TF mud client or terraform[J

line 2114: au BufNewFile,BufRead *.tf^I^I^Icall dist#ft#FTtf()[J

line 2115: [J

line 2116: " TLA+[J

line 2117: au BufNewFile,BufRead *.tla^I^I^Isetf tla[J

line 2118: [J

line 2119: " tmux configuration[J

line 2120: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux[J

line 2121: [J

line 2122: " TOML[J

line 2123: au BufNewFile,BufRead *.toml^I^I^Isetf toml[J

line 2124: [J

line 2125: " TPP - Text Presentation Program[J

line 2126: au BufNewFile,BufRead *.tpp^I^I^Isetf tpp[J

line 2127: [J

line 2128: " Treetop[J

line 2129: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop[J

line 2130: [J

line 2131: " Trustees[J

line 2132: au BufNewFile,BufRead trustees.conf^I^Isetf trustees[J

line 2133: [J

line 2134: " TSS - Geometry[J

line 2135: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm[J

line 2136: [J

line 2137: " TSS - Optics[J

line 2138: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop[J

line 2139: [J

line 2140: " TSS - Command Line (temporary)[J

line 2141: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl[J

line 2142: [J

line 2143: " TSV Files[J

line 2144: au BufNewFile,BufRead *.tsv^I^I^Isetf tsv[J

line 2145: [J

line 2146: " TWIG files[J

line 2147: au BufNewFile,BufReadPost *.twig^I^Isetf twig[J

line 2148: [J

line 2149: " TypeScript or Qt translation file (which is XML)[J

line 2150: au BufNewFile,BufReadPost *.ts if getline(1) =~ '<?xml' |   setf xml | else |   setf typescript | endif[J

line 2156: [J

line 2157: " TypeScript module and common[J

line 2158: au BufNewFile,BufRead *.mts,*.cts^I^Isetf typescript[J

line 2159: [J

line 2160: " TypeScript with React[J

line 2161: au BufNewFile,BufRead *.tsx^I^I^Isetf typescriptreact[J

line 2162: [J

line 2163: " Motif UIT/UIL files[J

line 2164: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil[J

line 2165: [J

line 2166: " Udev conf[J

line 2167: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf[J

line 2168: [J

line 2169: " Udev permissions[J

line 2170: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm[J

line 2171: "[J

line 2172: " Udev symlinks config[J

line 2173: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh[J

line 2174: [J

line 2175: " UnrealScript[J

line 2176: au BufNewFile,BufRead *.uc^I^I^Isetf uc[J

line 2177: [J

line 2178: " Updatedb[J

line 2179: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb[J

line 2180: [J

line 2181: " Upstart (init(8)) config files[J

line 2182: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart[J

line 2183: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart[J

line 2184: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart[J

line 2185: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart[J

line 2186: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart[J

line 2187: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart[J

line 2188: [J

line 2189: " Vala[J

line 2190: au BufNewFile,BufRead *.vala^I^I^Isetf vala[J

line 2191: [J

line 2192: " VDF[J

line 2193: au BufNewFile,BufRead *.vdf^I^I^Isetf vdf[J

line 2194: [J

line 2195: " VDM[J

line 2196: au BufRead,BufNewFile *.vdmpp,*.vpp^I^Isetf vdmpp[J

line 2197: au BufRead,BufNewFile *.vdmrt^I^I^Isetf vdmrt[J

line 2198: au BufRead,BufNewFile *.vdmsl,*.vdm^I^Isetf vdmsl[J

line 2199: [J

line 2200: " Vera[J

line 2201: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera[J

line 2202: [J

line 2203: " Vagrant (uses Ruby syntax)[J

line 2204: au BufNewFile,BufRead Vagrantfile^I^Isetf ruby[J

line 2205: [J

line 2206: " Verilog HDL[J

line 2207: au BufNewFile,BufRead *.v^I^I^Isetf verilog[J

line 2208: [J

line 2209: " Verilog-AMS HDL[J

line 2210: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams[J

line 2211: [J

line 2212: " SystemVerilog[J

line 2213: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog[J

line 2214: [J

line 2215: " VHS tape[J

line 2216: " .tape is also used by TapeCalc, which we do not support ATM.  If TapeCalc[J

line 2217: " support is needed the contents of the file needs to be inspected.[J

line 2218: au BufNewFile,BufRead *.tape^I^I^Isetf vhs[J

line 2219: [J

line 2220: " VHDL[J

line 2221: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst,*.vho  setf vhdl[J

line 2222: [J

line 2223: " Vim script[J

line 2224: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim[J

line 2225: [J

line 2226: " Viminfo file[J

line 2227: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo[J

line 2228: [J

line 2229: " Virata Config Script File or Drupal module[J

line 2230: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif[J

line 2236: [J

line 2237: " Visual Basic (also uses *.bas) or FORM[J

line 2238: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTfrm()[J

line 2239: [J

line 2240: " SaxBasic is close to Visual Basic[J

line 2241: au BufNewFile,BufRead *.sba^I^I^Isetf vb[J

line 2242: [J

line 2243: " Vgrindefs file[J

line 2244: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs[J

line 2245: [J

line 2246: " VRML V1.0c[J

line 2247: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml[J

line 2248: [J

line 2249: " Vroom (vim testing and executable documentation)[J

line 2250: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom[J

line 2251: [J

line 2252: " Vue.js Single File Component[J

line 2253: au BufNewFile,BufRead *.vue^I^I^Isetf vue[J

line 2254: [J

line 2255: " WebAssembly[J

line 2256: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast[J

line 2257: [J

line 2258: " Webmacro[J

line 2259: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro[J

line 2260: [J

line 2261: " Wget config[J

line 2262: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget[J

line 2263: [J

line 2264: " Wget2 config[J

line 2265: au BufNewFile,BufRead .wget2rc,wget2rc^I^Isetf wget2[J

line 2266: [J

line 2267: " Website MetaLanguage[J

line 2268: au BufNewFile,BufRead *.wml^I^I^Isetf wml[J

line 2269: [J

line 2270: " Winbatch[J

line 2271: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch[J

line 2272: [J

line 2273: " WSML[J

line 2274: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml[J

line 2275: [J

line 2276: " WPL[J

line 2277: au BufNewFile,BufRead *.wpl^I^I^Isetf xml[J

line 2278: [J

line 2279: " WvDial[J

line 2280: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial[J

line 2281: [J

line 2282: " CVS RC file[J

line 2283: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc[J

line 2284: [J

line 2285: " CVS commit file[J

line 2286: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs[J

line 2287: [J

line 2288: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment[J

line 2289: " lines in a WEB file).[J

line 2290: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif[J

line 2296: [J

line 2297: " Windows Scripting Host and Windows Script Component[J

line 2298: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh[J

line 2299: [J

line 2300: " XHTML[J

line 2301: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml[J

line 2302: [J

line 2303: " X Pixmap (dynamically sets colors, this used to trigger on BufEnter to make[J

line 2304: " it work better, but that breaks setting 'filetype' manually)[J

line 2305: au BufNewFile,BufRead *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif[J

line 2311: au BufNewFile,BufRead *.xpm2^I^I^Isetf xpm2[J

line 2312: [J

line 2313: " XFree86 config[J

line 2314: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf[J

line 2319: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 2322: [J

line 2323: " Xorg config[J

line 2324: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 2325: [J

line 2326: " Xinetd conf[J

line 2327: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd[J

line 2328: [J

line 2329: " XS Perl extension interface language[J

line 2330: au BufNewFile,BufRead *.xs^I^I^Isetf xs[J

line 2331: [J

line 2332: " X resources file[J

line 2333: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults[J

line 2334: [J

line 2335: " Xmath[J

line 2336: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath[J

line 2337: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif[J

line 2339: [J

line 2340: " XML  specific variants: docbk and xbl[J

line 2341: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()[J

line 2342: [J

line 2343: " XMI (holding UML models) is also XML[J

line 2344: au BufNewFile,BufRead *.xmi^I^I^Isetf xml[J

line 2345: [J

line 2346: " CSPROJ files are Visual Studio.NET's XML-based C# project config files[J

line 2347: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml[J

line 2348: [J

line 2349: " FSPROJ files are Visual Studio.NET's XML-based F# project config files[J

line 2350: au BufNewFile,BufRead *.fsproj,*.fsproj.user^Isetf xml[J

line 2351: [J

line 2352: " VBPROJ files are Visual Studio.NET's XML-based Visual Basic project config files[J

line 2353: au BufNewFile,BufRead *.vbproj,*.vbproj.user^Isetf xml[J

line 2354: [J

line 2355: " Qt Linguist translation source and Qt User Interface Files are XML[J

line 2356: " However, for .ts TypeScript is more common.[J

line 2357: au BufNewFile,BufRead *.ui^I^I^Isetf xml[J

line 2358: [J

line 2359: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)[J

line 2360: au BufNewFile,BufRead *.tpm^I^I^Isetf xml[J

line 2361: [J

line 2362: " Xdg menus[J

line 2363: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml[J

line 2364: [J

line 2365: " ATI graphics driver configuration[J

line 2366: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml[J

line 2367: [J

line 2368: " Web Services Description Language (WSDL)[J

line 2369: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml[J

line 2370: [J

line 2371: " Workflow Description Language (WDL)[J

line 2372: au BufNewFile,BufRead *.wdl^I^I^Isetf wdl[J

line 2373: [J

line 2374: " XLIFF (XML Localisation Interchange File Format) is also XML[J

line 2375: au BufNewFile,BufRead *.xlf^I^I^Isetf xml[J

line 2376: au BufNewFile,BufRead *.xliff^I^I^Isetf xml[J

line 2377: [J

line 2378: " XML User Interface Language[J

line 2379: au BufNewFile,BufRead *.xul^I^I^Isetf xml[J

line 2380: [J

line 2381: " X11 xmodmap (also see below)[J

line 2382: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap[J

line 2383: [J

line 2384: " Xquery[J

line 2385: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery[J

line 2386: [J

line 2387: " XSD[J

line 2388: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd[J

line 2389: [J

line 2390: " Xslt[J

line 2391: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt[J

line 2392: [J

line 2393: " Yacc[J

line 2394: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc[J

line 2395: [J

line 2396: " Yacc or racc[J

line 2397: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()[J

line 2398: [J

line 2399: " Yaml[J

line 2400: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml[J

line 2401: [J

line 2402: " Raml[J

line 2403: au BufNewFile,BufRead *.raml^I^I^Isetf raml[J

line 2404: [J

line 2405: " yum conf (close enough to dosini)[J

line 2406: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini[J

line 2407: [J

line 2408: " YANG[J

line 2409: au BufRead,BufNewFile *.yang^I^I^Isetf yang[J

line 2410: [J

line 2411: " Zimbu[J

line 2412: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu[J

line 2413: " Zimbu Templates[J

line 2414: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl[J

line 2415: [J

line 2416: " Zope[J

line 2417: "   dtml (zope dynamic template markup language), pt (zope page template),[J

line 2418: "   cpt (zope form controller page template)[J

line 2419: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()[J

line 2420: "   zsql (zope sql method)[J

line 2421: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()[J

line 2422: [J

line 2423: " Z80 assembler asz80[J

line 2424: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a[J

line 2425: [J

line 2426: augroup END[J

line 2427: [J

line 2428: [J

line 2429: " Source the user-specified filetype file, for backwards compatibility with[J

line 2430: " Vim 5.x.[J

line 2431: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))[J

line 2432:   execute "source " . myfiletypefile[J

line 2433: endif[J

line 2434: [J

line 2435: [J

line 2436: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used[J

line 2437: " when there are no matching file name extensions.[J

line 2438: " Don't do this for compressed files.[J

line 2439: augroup filetypedetect[J

line 2440: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif[J

line 2443: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif[J

line 2444: [J

line 2445: [J

line 2446: " Plain text files, needs to be far down to not override others.  This avoids[J

line 2447: " the "conf" type being used if there is a line starting with '#'.[J

line 2448: " But before patterns matching everything in a directory.[J

line 2449: au BufNewFile,BufRead *.text,README,LICENSE,COPYING,AUTHORS^Isetf text[J

line 2450: [J

line 2451: [J

line 2452: " Extra checks for when no filetype has been detected now.  Mostly used for[J

line 2453: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim[J

line 2454: " script file.[J

line 2455: " Most of these should call s:StarSetf() to avoid names ending in .gz and the[J

line 2456: " like are used.[J

line 2457: [J

line 2458: " More Apache style config files[J

line 2459: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')[J

line 2460: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')[J

line 2461: [J

line 2462: " More Apache config files[J

line 2463: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')[J

line 2464: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.*/*,*/etc/httpd/mods-*/*,*/etc/httpd/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')[J

line 2465: [J

line 2466: " APT config file[J

line 2467: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} call s:StarSetf('aptconf')[J

line 2468: [J

line 2469: " Asterisk config file[J

line 2470: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')[J

line 2471: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

line 2472: [J

line 2473: " Bazaar version control[J

line 2474: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr[J

line 2475: [J

line 2476: " Bazel build file[J

line 2477: if !has("fname_case")[J

line 2478:   au BufNewFile,BufRead *.BUILD,BUILD^I^Isetf bzl[J

line 2479: endif[J

line 2480: [J

line 2481: " BIND zone[J

line 2482: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')[J

line 2483: [J

line 2484: au BufNewFile,BufRead cabal.project.*^I^Icall s:StarSetf('cabalproject')[J

line 2485: [J

line 2486: " Calendar[J

line 2487: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')[J

line 2490: [J

line 2491: " Changelog[J

line 2492: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif[J

line 2498: [J

line 2499: " Crontab[J

line 2500: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')[J

line 2501: [J

line 2502: " dnsmasq(8) configuration[J

line 2503: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')[J

line 2504: [J

line 2505: " Dockerfile[J

line 2506: au BufNewFile,BufRead Dockerfile.*,Containerfile.*^Icall s:StarSetf('dockerfile')[J

line 2507: [J

line 2508: " Dracula[J

line 2509: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')[J

line 2510: [J

line 2511: " Fvwm[J

line 2512: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')[J

line 2513: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')[J

line 2515: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif[J

line 2521: [J

line 2522: " Gedcom[J

line 2523: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')[J

line 2524: [J

line 2525: " Git[J

line 2526: au BufNewFile,BufRead */.gitconfig.d/*,*/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')[J

line 2527: [J

line 2528: " Gitolite[J

line 2529: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')[J

line 2530: [J

line 2531: " GTK RC[J

line 2532: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')[J

line 2533: [J

line 2534: " Jam[J

line 2535: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')[J

line 2536: [J

line 2537: " Jargon[J

line 2538: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif[J

line 2542: [J

line 2543: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

line 2544: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')[J

line 2545: [J

line 2546: " Kconfig[J

line 2547: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')[J

line 2548: [J

line 2549: " Lilo: Linux loader[J

line 2550: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')[J

line 2551: [J

line 2552: " Libsensors[J

line 2553: au BufNewFile,BufRead */etc/sensors.d/[^.]*^Icall s:StarSetf('sensors')[J

line 2554: [J

line 2555: " Logcheck[J

line 2556: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')[J

line 2557: [J

line 2558: " Makefile[J

line 2559: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')[J

line 2560: [J

line 2561: " Ruby Makefile[J

line 2562: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')[J

line 2563: [J

line 2564: " Mail (also matches muttrc.vim, so this is below the other checks)[J

line 2565: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail[J

line 2566: [J

line 2567: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')[J

line 2568: [J

line 2569: " Modconf[J

line 2570: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif[J

line 2574: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')[J

line 2575: [J

line 2576: " Mutt setup files (must be before catch *.rc)[J

line 2577: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')[J

line 2578: [J

line 2579: " Mutt setup file[J

line 2580: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')[J

line 2581: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')[J

line 2582: [J

line 2583: " Neomutt setup file[J

line 2584: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')[J

line 2585: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')[J

line 2586: [J

line 2587: " Nroff macros[J

line 2588: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')[J

line 2589: [J

line 2590: " OpenBSD hostname.if[J

line 2591: au BufNewFile,BufRead */etc/hostname.*^I^Icall s:StarSetf('config')[J

line 2592: [J

line 2593: " Pam conf[J

line 2594: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')[J

line 2595: [J

line 2596: " Printcap and Termcap[J

line 2597: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif[J

line 2601: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif[J

line 2605: [J

line 2606: " ReDIF[J

line 2607: " Only used when the .rdf file was not detected to be XML.[J

line 2608: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()[J

line 2609: [J

line 2610: " Remind[J

line 2611: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')[J

line 2612: [J

line 2613: " SGML catalog file[J

line 2614: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')[J

line 2615: [J

line 2616: " avoid doc files being recognized a shell files[J

line 2617: au BufNewFile,BufRead */doc/{,.}bash[_-]completion{,.d,.sh}{,/*} setf text[J

line 2618: [J

line 2619: " Shell scripts ending in a star[J

line 2620: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD*,APKBUILD*,*/{,.}bash[_-]completion{,.d,.sh}{,/*} call dist#ft#SetFileTypeSH("bash")[J

line 2621: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")[J

line 2622: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))[J

line 2623: [J

line 2624: " Sudoers[J

line 2625: au BufNewFile,BufRead */etc/sudoers.d/*^I^Icall s:StarSetf('sudoers')[J

line 2626: [J

line 2627: " tcsh scripts ending in a star[J

line 2628: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")[J

line 2629: [J

line 2630: " csh scripts ending in a star[J

line 2631: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()[J

line 2632: [J

line 2633: " tmux configuration with arbitrary extension[J

line 2634: au BufNewFile,BufRead {.,}tmux*.conf*^I^Isetf tmux[J

line 2635: [J

line 2636: " VHDL[J

line 2637: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')[J

line 2638: [J

line 2639: " Vim script[J

line 2640: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')[J

line 2641: [J

line 2642: " Subversion commit file[J

line 2643: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn[J

line 2644: [J

line 2645: " X resources file[J

line 2646: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')[J

line 2647: [J

line 2648: " XFree86 config[J

line 2649: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')[J

line 2651: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')[J

line 2656: [J

line 2657: " X11 xmodmap[J

line 2658: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')[J

line 2659: [J

line 2660: " Xinetd conf[J

line 2661: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')[J

line 2662: [J

line 2663: " yum conf (close enough to dosini)[J

line 2664: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')[J

line 2665: [J

line 2666: " Z-Shell script ending in a star[J

line 2667: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')[J

line 2668: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')[J

line 2669: [J

line 2670: [J

line 2671: " Help files match *.txt but should have a last line that is a modeline.[J

line 2672: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif[J

line 2676: [J

line 2677: " Blueprint markup files[J

line 2678: au BufNewFile,BufRead *.blp^I^I^Isetf blueprint[J

line 2679: [J

line 2680: " Use the filetype detect plugins.  They may overrule any of the previously[J

line 2681: " detected filetypes.[J

line 2682: runtime! ftdetect/*.vim[J

Searching for "ftdetect/*.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/ftdetect/*.vim"[J
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"[J
chdir(/usr/share/vim/vimfiles/ftdetect)[J
fchdir() to previous dir[J
line 2682: sourcing "/usr/share/vim/vimfiles/ftdetect/lf.vim"[J
line 1: echo "in /usr/share/vim/vimfiles/ftdetect/lf.vim"[J

in /usr/share/vim/vimfiles/ftdetect/lf.vim[J
line 2: [J

line 3: " Use lf to select and open file(s) in vim (adapted from ranger).[J

line 4: "[J

line 5: " You need to either copy the content of this file to your ~/.vimrc or source[J

line 6: " this file directly:[J

line 7: "[J

line 8: "     let lfvim = "/path/to/lf.vim"[J

line 9: "     if filereadable(lfvim)[J

line 10: "         exec "source " . lfvim[J

line 11: "     endif[J

line 12: "[J

line 13: " You may also like to assign a key to this command:[J

line 14: "[J

line 15: set hidden[J

line 16: nnoremap <leader>lf :LF<cr>[J

line 17: "[J

line 18: [J

line 19: function! LF()[J

line 37: command! -bar LF call LF()[J

line 38: [J

finished sourcing /usr/share/vim/vimfiles/ftdetect/lf.vim[J
continuing in /usr/share/vim/vim90/filetype.vim[J
Searching for "/usr/share/vim/vim90/ftdetect/*.vim"[J
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"[J
Searching for "/home/m/.vim/after/ftdetect/*.vim"[J
line 2683: [J

line 2684: " NOTE: The above command could have ended the filetypedetect autocmd group[J

line 2685: " and started another one. Let's make sure it has ended to get to a consistent[J

line 2686: " state.[J

line 2687: augroup END[J

line 2688: [J

line 2689: " Generic configuration file. Use FALLBACK, it's just guessing![J

line 2690: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif[J

line 2696: [J

line 2697: [J

line 2698: " If the GUI is already running, may still need to install the Syntax menu.[J

line 2699: " Don't do it when the 'M' flag is included in 'guioptions'.[J

line 2700: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"[J

line 2702:   source <sfile>:p:h/menu.vim[J

line 2703: endif[J

line 2704: [J

line 2705: " Function called for testing all functions defined here.  These are[J

line 2706: " script-local, thus need to be executed here.[J

line 2707: " Returns a string with error messages (hopefully empty).[J

line 2708: func TestFiletypeFuncs(testlist)[J

line 2719: [J

line 2720: " Restore 'cpoptions'[J

line 2721: let &cpo = s:cpo_save[J

line 2722: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim90/filetype.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/m/.vim/after/filetype.vim"[J
line 95: " Enable plugins and load plugin for the detected file type.[J

line 96: filetype plugin on[J

Searching for "filetype.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim90/filetype.vim"[J
chdir(/usr/share/vim/vim90)[J
fchdir() to previous dir[J
line 96: sourcing "/usr/share/vim/vim90/filetype.vim"[J
line 1: echo "in " . $VIMRUNTIME . "/filetype.vim"[J

in /usr/share/vim/vim90/filetype.vim[J
line 2: " Vim support file to detect file types[J

line 3: "[J

line 4: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 5: " Last Change:^I2022 Dec 19[J

line 6: [J

line 7: " Listen very carefully, I will say this only once[J

line 8: if exists("did_load_filetypes")[J

line 9:   finish[J

finished sourcing /usr/share/vim/vim90/filetype.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/m/.vim/after/filetype.vim"[J
Searching for "ftplugin.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/ftplugin.vim"[J
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"[J
Searching for "/usr/share/vim/vim90/ftplugin.vim"[J
chdir(/usr/share/vim/vim90)[J
fchdir() to previous dir[J
line 96: sourcing "/usr/share/vim/vim90/ftplugin.vim"[J
line 1: vim9script noclear[J

line 2: [J

line 3: # Vim support file to switch on loading plugins for file types[J

line 4: #[J

line 5: # Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 6: # Last change:^I2022 Feb 11[J

line 7: [J

line 8: if exists("g:did_load_ftplugin")[J

line 9:   finish[J

line 10: endif[J

line 11: g:did_load_ftplugin = 1[J

line 13: augroup filetypeplugin[J

line 14:   au FileType * call LoadFTPlugin()[J

line 15: augroup END[J

line 16: [J

line 17: if exists('*LoadFTPlugin')[J

line 19:   finish[J

line 20: endif[J

line 21: [J

line 22: def LoadFTPlugin()[J

finished sourcing /usr/share/vim/vim90/ftplugin.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"[J
Searching for "/home/m/.vim/after/ftplugin.vim"[J
line 97: " Load and indent file for the detected file type.[J

line 98: filetype indent on[J

Searching for "filetype.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim90/filetype.vim"[J
chdir(/usr/share/vim/vim90)[J
fchdir() to previous dir[J
line 98: sourcing "/usr/share/vim/vim90/filetype.vim"[J
line 1: echo "in " . $VIMRUNTIME . "/filetype.vim"[J

in /usr/share/vim/vim90/filetype.vim[J
line 2: " Vim support file to detect file types[J

line 3: "[J

line 4: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 5: " Last Change:^I2022 Dec 19[J

line 6: [J

line 7: " Listen very carefully, I will say this only once[J

line 8: if exists("did_load_filetypes")[J

line 9:   finish[J

finished sourcing /usr/share/vim/vim90/filetype.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/m/.vim/after/filetype.vim"[J
Searching for "indent.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/indent.vim"[J
Searching for "/usr/share/vim/vimfiles/indent.vim"[J
Searching for "/usr/share/vim/vim90/indent.vim"[J
chdir(/usr/share/vim/vim90)[J
fchdir() to previous dir[J
line 98: sourcing "/usr/share/vim/vim90/indent.vim"[J
line 1: " Vim support file to switch on loading indent files for file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2022 Feb 11[J

line 5: [J

line 6: if exists("did_indent_on")[J

line 7:   finish[J

line 8: endif[J

line 9: let did_indent_on = 1[J

line 10: [J

line 11: augroup filetypeindent[J

line 12:   au FileType * call s:LoadIndent()[J

line 13: augroup END[J

line 14: [J

line 15: def s:LoadIndent()[J

finished sourcing /usr/share/vim/vim90/indent.vim[J
continuing in /home/m/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/indent.vim"[J
Searching for "/home/m/.vim/after/indent.vim"[J
line 99: " Turn syntax highlighting on.[J

line 100: syntax on[J

line 100: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/share/vim/vim90/syntax)[J
fchdir() to previous dir[J
line 100: sourcing "/usr/share/vim/vim90/syntax/syntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2022 Apr 12[J

line 4: [J

line 5: " This file is used for ":syntax on".[J

line 6: " It installs the autocommands and starts highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

line 13: " any leftovers are cleared.[J

line 14: if exists("syntax_on") || exists("syntax_manual")[J

line 15:   so <sfile>:p:h/nosyntax.vim[J

line 16: endif[J

line 17: [J

line 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

line 19: runtime syntax/synload.vim[J

Searching for "syntax/synload.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/syntax/synload.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"[J
Searching for "/usr/share/vim/vim90/syntax/synload.vim"[J
chdir(/usr/share/vim/vim90/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim90/syntax/synload.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2022 Apr 12[J

line 4: [J

line 5: " This file sets up for syntax highlighting.[J

line 6: " It is loaded from "syntax.vim" and "manual.vim".[J

line 7: " 1. Set the default highlight groups.[J

line 8: " 2. Install Syntax autocommands for all the available syntax files.[J

line 9: [J

line 10: if !has("syntax")[J

line 11:   finish[J

line 12: endif[J

line 13: [J

line 14: " let others know that syntax has been switched on[J

line 15: let syntax_on = 1[J

line 16: [J

line 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

line 18: if exists("colors_name")[J

line 19:   exe "colors " . colors_name[J

line 19: colors molokai[J

Searching for "colors/lists/default.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/colors/lists/default.vim"[J
Searching for "/usr/share/vim/vimfiles/colors/lists/default.vim"[J
Searching for "/usr/share/vim/vim90/colors/lists/default.vim"[J
chdir(/usr/share/vim/vim90/colors/lists)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim90/colors/lists/default.vim"[J
line 1: " Maintainer:  Drew Vogel <dvogel@sidejump.org>[J

line 2: " Last Change: 2022 Mar 20[J

line 3: "[J

line 4: " Replaced rgb.txt as the source of de facto standard color names. This is[J

line 5: " sourced each time the colorscheme command is run. It is also sourced each[J

line 6: " time the highlight command fails to recognize a gui color. You can override[J

line 7: " these colors by introducing a new colors/lists/default.vim file earlier in[J

line 8: " the runtimepath.[J

line 9: [J

line 10: let s:keepcpo= &cpo[J

line 11: set cpo&vim[J

line 12: [J

line 13: call extend(v:colornames, { 'snow': '#fffafa', 'ghost white': '#f8f8ff', 'ghostwhite': '#f8f8ff', 'white smoke': '#f5f5f5', 'whitesmoke': '#f5f5f5', 'gainsboro': '#dcdcdc', 'floral white': '#fffaf0', 'floralwhite': '#fffaf0', 'old lace': '#fdf5e6', 'oldlace': '#fdf5e6', 'linen': '#faf0e6', 'antique white': '#faebd7', 'antiquewhite': '#faebd7', 'papaya whip': '#ffefd5', 'papayawhip': '#ffefd5', 'blanched almond': '#ffebcd', 'blanchedalmond': '#ffebcd', 'bisque': '#ffe4c4', 'peach puff': '#ffdab9', 'peachpuff': '#ffdab9', 'navajo white': '#ffdead', 'navajowhite': '#ffdead', 'moccasin': '#ffe4b5', 'cornsilk': '#fff8dc', 'ivory': '#fffff0', 'lemon chiffon': '#fffacd', 'lemonchiffon': '#fffacd', 'seashell': '#fff5ee', 'honeydew': '#f0fff0', 'mint cream': '#f5fffa', 'mintcream': '#f5fffa', 'azure': '#f0ffff', 'alice blue': '#f0f8ff', 'aliceblue': '#f0f8ff', 'lavender': '#e6e6fa', 'lavender blush': '#fff0f5', 'lavenderblush': '#fff0f5', 'misty rose': '#ffe4e1', 'mistyrose': '#ffe4e1', 'white': '#ffffff', 'b[J

line 803: [J

line 804: let &cpo= s:keepcpo[J

line 805: unlet s:keepcpo[J

line 806: [J

line 807: "vim: sw=4[J

finished sourcing /usr/share/vim/vim90/colors/lists/default.vim[J
continuing in /usr/share/vim/vim90/syntax/synload.vim[J
Searching for "/usr/share/vim/vimfiles/after/colors/lists/default.vim"[J
Searching for "/home/m/.vim/after/colors/lists/default.vim"[J
Searching for "colors/molokai.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/colors/molokai.vim"[J
chdir(/home/m/.vim/colors)[J
fchdir() to previous dir[J
line 19: sourcing "/home/m/.vim/colors/molokai.vim"[J
line 1: " Vim color file[J

line 2: "[J

line 3: " Author: Tomas Restrepo <tomas@winterdom.com>[J

line 4: " https://github.com/tomasr/molokai[J

line 5: "[J

line 6: " Note: Based on the Monokai theme for TextMate[J

line 7: " by Wimer Hazenberg and its darker variant[J

line 8: " by Hamish Stuart Macpherson[J

line 9: "[J

line 10: [J

line 11: hi clear[J

Searching for "syntax/syncolor.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim90/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim90/syntax)[J
fchdir() to previous dir[J
line 11: sourcing "/usr/share/vim/vim90/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2020 Feb 13[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   " #6a5acd is SlateBlue[J

line 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

line 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 50:   " #6a0dad is Purple[J

line 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

line 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 55: endif[J

line 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 58: [J

line 59: " Common groups that link to default highlighting.[J

line 60: " You can specify other highlighting easily.[J

line 61: SynLink String^I^IConstant[J

line 61: hi link String^I^IConstant[J

line 62: SynLink Character^IConstant[J

line 62: hi link Character^IConstant[J

line 63: SynLink Number^I^IConstant[J

line 63: hi link Number^I^IConstant[J

line 64: SynLink Boolean^I^IConstant[J

line 64: hi link Boolean^I^IConstant[J

line 65: SynLink Float^I^INumber[J

line 65: hi link Float^I^INumber[J

line 66: SynLink Function^IIdentifier[J

line 66: hi link Function^IIdentifier[J

line 67: SynLink Conditional^IStatement[J

line 67: hi link Conditional^IStatement[J

line 68: SynLink Repeat^I^IStatement[J

line 68: hi link Repeat^I^IStatement[J

line 69: SynLink Label^I^IStatement[J

line 69: hi link Label^I^IStatement[J

line 70: SynLink Operator^IStatement[J

line 70: hi link Operator^IStatement[J

line 71: SynLink Keyword^I^IStatement[J

line 71: hi link Keyword^I^IStatement[J

line 72: SynLink Exception^IStatement[J

line 72: hi link Exception^IStatement[J

line 73: SynLink Include^I^IPreProc[J

line 73: hi link Include^I^IPreProc[J

line 74: SynLink Define^I^IPreProc[J

line 74: hi link Define^I^IPreProc[J

line 75: SynLink Macro^I^IPreProc[J

line 75: hi link Macro^I^IPreProc[J

line 76: SynLink PreCondit^IPreProc[J

line 76: hi link PreCondit^IPreProc[J

line 77: SynLink StorageClass^IType[J

line 77: hi link StorageClass^IType[J

line 78: SynLink Structure^IType[J

line 78: hi link Structure^IType[J

line 79: SynLink Typedef^I^IType[J

line 79: hi link Typedef^I^IType[J

line 80: SynLink Tag^I^ISpecial[J

line 80: hi link Tag^I^ISpecial[J

line 81: SynLink SpecialChar^ISpecial[J

line 81: hi link SpecialChar^ISpecial[J

line 82: SynLink Delimiter^ISpecial[J

line 82: hi link Delimiter^ISpecial[J

line 83: SynLink SpecialComment^ISpecial[J

line 83: hi link SpecialComment^ISpecial[J

line 84: SynLink Debug^I^ISpecial[J

line 84: hi link Debug^I^ISpecial[J

line 85: [J

line 86: delcommand SynColor[J

line 87: delcommand SynLink[J

finished sourcing /usr/share/vim/vim90/syntax/syncolor.vim[J
continuing in /home/m/.vim/colors/molokai.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/m/.vim/after/syntax/syncolor.vim"[J
line 12: [J

line 13: if version > 580[J

line 14:     " no guarantees for version 5.8 and below, but this makes it stop[J

line 15:     " complaining[J

line 16:     hi clear[J

Searching for "syntax/syncolor.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim90/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim90/syntax)[J
fchdir() to previous dir[J
line 16: sourcing "/usr/share/vim/vim90/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2020 Feb 13[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   " #6a5acd is SlateBlue[J

line 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

line 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 50:   " #6a0dad is Purple[J

line 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

line 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 55: endif[J

line 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 58: [J

line 59: " Common groups that link to default highlighting.[J

line 60: " You can specify other highlighting easily.[J

line 61: SynLink String^I^IConstant[J

line 61: hi link String^I^IConstant[J

line 62: SynLink Character^IConstant[J

line 62: hi link Character^IConstant[J

line 63: SynLink Number^I^IConstant[J

line 63: hi link Number^I^IConstant[J

line 64: SynLink Boolean^I^IConstant[J

line 64: hi link Boolean^I^IConstant[J

line 65: SynLink Float^I^INumber[J

line 65: hi link Float^I^INumber[J

line 66: SynLink Function^IIdentifier[J

line 66: hi link Function^IIdentifier[J

line 67: SynLink Conditional^IStatement[J

line 67: hi link Conditional^IStatement[J

line 68: SynLink Repeat^I^IStatement[J

line 68: hi link Repeat^I^IStatement[J

line 69: SynLink Label^I^IStatement[J

line 69: hi link Label^I^IStatement[J

line 70: SynLink Operator^IStatement[J

line 70: hi link Operator^IStatement[J

line 71: SynLink Keyword^I^IStatement[J

line 71: hi link Keyword^I^IStatement[J

line 72: SynLink Exception^IStatement[J

line 72: hi link Exception^IStatement[J

line 73: SynLink Include^I^IPreProc[J

line 73: hi link Include^I^IPreProc[J

line 74: SynLink Define^I^IPreProc[J

line 74: hi link Define^I^IPreProc[J

line 75: SynLink Macro^I^IPreProc[J

line 75: hi link Macro^I^IPreProc[J

line 76: SynLink PreCondit^IPreProc[J

line 76: hi link PreCondit^IPreProc[J

line 77: SynLink StorageClass^IType[J

line 77: hi link StorageClass^IType[J

line 78: SynLink Structure^IType[J

line 78: hi link Structure^IType[J

line 79: SynLink Typedef^I^IType[J

line 79: hi link Typedef^I^IType[J

line 80: SynLink Tag^I^ISpecial[J

line 80: hi link Tag^I^ISpecial[J

line 81: SynLink SpecialChar^ISpecial[J

line 81: hi link SpecialChar^ISpecial[J

line 82: SynLink Delimiter^ISpecial[J

line 82: hi link Delimiter^ISpecial[J

line 83: SynLink SpecialComment^ISpecial[J

line 83: hi link SpecialComment^ISpecial[J

line 84: SynLink Debug^I^ISpecial[J

line 84: hi link Debug^I^ISpecial[J

line 85: [J

line 86: delcommand SynColor[J

line 87: delcommand SynLink[J

finished sourcing /usr/share/vim/vim90/syntax/syncolor.vim[J
continuing in /home/m/.vim/colors/molokai.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/m/.vim/after/syntax/syncolor.vim"[J
line 17:     if exists("syntax_on")[J

line 18:         syntax reset[J

line 18: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim90/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim90/syntax)[J
fchdir() to previous dir[J
line 18: sourcing "/usr/share/vim/vim90/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2020 Feb 13[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   " #6a5acd is SlateBlue[J

line 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

line 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 50:   " #6a0dad is Purple[J

line 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

line 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 55: endif[J

line 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 58: [J

line 59: " Common groups that link to default highlighting.[J

line 60: " You can specify other highlighting easily.[J

line 61: SynLink String^I^IConstant[J

line 61: hi! link String^I^IConstant[J

line 62: SynLink Character^IConstant[J

line 62: hi! link Character^IConstant[J

line 63: SynLink Number^I^IConstant[J

line 63: hi! link Number^I^IConstant[J

line 64: SynLink Boolean^I^IConstant[J

line 64: hi! link Boolean^I^IConstant[J

line 65: SynLink Float^I^INumber[J

line 65: hi! link Float^I^INumber[J

line 66: SynLink Function^IIdentifier[J

line 66: hi! link Function^IIdentifier[J

line 67: SynLink Conditional^IStatement[J

line 67: hi! link Conditional^IStatement[J

line 68: SynLink Repeat^I^IStatement[J

line 68: hi! link Repeat^I^IStatement[J

line 69: SynLink Label^I^IStatement[J

line 69: hi! link Label^I^IStatement[J

line 70: SynLink Operator^IStatement[J

line 70: hi! link Operator^IStatement[J

line 71: SynLink Keyword^I^IStatement[J

line 71: hi! link Keyword^I^IStatement[J

line 72: SynLink Exception^IStatement[J

line 72: hi! link Exception^IStatement[J

line 73: SynLink Include^I^IPreProc[J

line 73: hi! link Include^I^IPreProc[J

line 74: SynLink Define^I^IPreProc[J

line 74: hi! link Define^I^IPreProc[J

line 75: SynLink Macro^I^IPreProc[J

line 75: hi! link Macro^I^IPreProc[J

line 76: SynLink PreCondit^IPreProc[J

line 76: hi! link PreCondit^IPreProc[J

line 77: SynLink StorageClass^IType[J

line 77: hi! link StorageClass^IType[J

line 78: SynLink Structure^IType[J

line 78: hi! link Structure^IType[J

line 79: SynLink Typedef^I^IType[J

line 79: hi! link Typedef^I^IType[J

line 80: SynLink Tag^I^ISpecial[J

line 80: hi! link Tag^I^ISpecial[J

line 81: SynLink SpecialChar^ISpecial[J

line 81: hi! link SpecialChar^ISpecial[J

line 82: SynLink Delimiter^ISpecial[J

line 82: hi! link Delimiter^ISpecial[J

line 83: SynLink SpecialComment^ISpecial[J

line 83: hi! link SpecialComment^ISpecial[J

line 84: SynLink Debug^I^ISpecial[J

line 84: hi! link Debug^I^ISpecial[J

line 85: [J

line 86: delcommand SynColor[J

line 87: delcommand SynLink[J

finished sourcing /usr/share/vim/vim90/syntax/syncolor.vim[J
continuing in /home/m/.vim/colors/molokai.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/m/.vim/after/syntax/syncolor.vim"[J
line 19:     endif[J

line 20: endif[J

line 21: let g:colors_name="molokai"[J

line 22: [J

line 23: if exists("g:molokai_original")[J

line 24:     let s:molokai_original = g:molokai_original[J

line 25: else[J

line 26:     let s:molokai_original = 0[J

line 27: endif[J

line 28: [J

line 29: [J

line 30: hi Boolean         guifg=#AE81FF[J

line 31: hi Character       guifg=#E6DB74[J

line 32: hi Number          guifg=#AE81FF[J

line 33: hi String          guifg=#E6DB74[J

line 34: hi Conditional     guifg=#F92672               gui=bold[J

line 35: hi Constant        guifg=#AE81FF               gui=bold[J

line 36: hi Cursor          guifg=#000000 guibg=#F8F8F0[J

line 37: hi iCursor         guifg=#000000 guibg=#F8F8F0[J

line 38: hi Debug           guifg=#BCA3A3               gui=bold[J

line 39: hi Define          guifg=#66D9EF[J

line 40: hi Delimiter       guifg=#8F8F8F[J

line 41: hi DiffAdd                       guibg=#13354A[J

line 42: hi DiffChange      guifg=#89807D guibg=#4C4745[J

line 43: hi DiffDelete      guifg=#960050 guibg=#1E0010[J

line 44: hi DiffText                      guibg=#4C4745 gui=italic,bold[J

line 45: [J

line 46: hi Directory       guifg=#A6E22E               gui=bold[J

line 47: hi Error           guifg=#E6DB74 guibg=#1E0010[J

line 48: hi ErrorMsg        guifg=#F92672 guibg=#232526 gui=bold[J

line 49: hi Exception       guifg=#A6E22E               gui=bold[J

line 50: hi Float           guifg=#AE81FF[J

line 51: hi FoldColumn      guifg=#465457 guibg=#000000[J

line 52: hi Folded          guifg=#465457 guibg=#000000[J

line 53: hi Function        guifg=#A6E22E[J

line 54: hi Identifier      guifg=#FD971F[J

line 55: hi Ignore          guifg=#808080 guibg=bg[J

line 56: hi IncSearch       guifg=#C4BE89 guibg=#000000[J

line 57: [J

line 58: hi Keyword         guifg=#F92672               gui=bold[J

line 59: hi Label           guifg=#E6DB74               gui=none[J

line 60: hi Macro           guifg=#C4BE89               gui=italic[J

line 61: hi SpecialKey      guifg=#66D9EF               gui=italic[J

line 62: [J

line 63: hi MatchParen      guifg=#000000 guibg=#FD971F gui=bold[J

line 64: hi ModeMsg         guifg=#E6DB74[J

line 65: hi MoreMsg         guifg=#E6DB74[J

line 66: hi Operator        guifg=#F92672[J

line 67: [J

line 68: " complete menu[J

line 69: hi Pmenu           guifg=#66D9EF guibg=#000000[J

line 70: hi PmenuSel                      guibg=#808080[J

line 71: hi PmenuSbar                     guibg=#080808[J

line 72: hi PmenuThumb      guifg=#66D9EF[J

line 73: [J

line 74: hi PreCondit       guifg=#A6E22E               gui=bold[J

line 75: hi PreProc         guifg=#A6E22E[J

line 76: hi Question        guifg=#66D9EF[J

line 77: hi Repeat          guifg=#F92672               gui=bold[J

line 78: hi Search          guifg=#000000 guibg=#FFE792[J

line 79: " marks[J

line 80: hi SignColumn      guifg=#A6E22E guibg=#232526[J

line 81: hi SpecialChar     guifg=#F92672               gui=bold[J

line 82: hi SpecialComment  guifg=#7E8E91               gui=bold[J

line 83: hi Special         guifg=#66D9EF guibg=bg      gui=italic[J

line 84: if has("spell")[J

line 85:     hi SpellBad    guisp=#FF0000 gui=undercurl[J

line 86:     hi SpellCap    guisp=#7070F0 gui=undercurl[J

line 87:     hi SpellLocal  guisp=#70F0F0 gui=undercurl[J

line 88:     hi SpellRare   guisp=#FFFFFF gui=undercurl[J

line 89: endif[J

line 90: hi Statement       guifg=#F92672               gui=bold[J

line 91: hi StatusLine      guifg=#455354 guibg=fg[J

line 92: hi StatusLineNC    guifg=#808080 guibg=#080808[J

line 93: hi StorageClass    guifg=#FD971F               gui=italic[J

line 94: hi Structure       guifg=#66D9EF[J

line 95: hi Tag             guifg=#F92672               gui=italic[J

line 96: hi Title           guifg=#ef5939[J

line 97: hi Todo            guifg=#FFFFFF guibg=bg      gui=bold[J

line 98: [J

line 99: hi Typedef         guifg=#66D9EF[J

line 100: hi Type            guifg=#66D9EF               gui=none[J

line 101: hi Underlined      guifg=#808080               gui=underline[J

line 102: [J

line 103: hi VertSplit       guifg=#808080 guibg=#080808 gui=bold[J

line 104: "guibg=#403D3D[J

line 105: hi VisualNOS                     guibg=#403D3D[J

line 106: hi Visual                        guibg=#403D3D[J

line 107: [J

line 108: hi WarningMsg      guifg=#FFFFFF guibg=#333333 gui=bold[J

line 109: hi WildMenu        guifg=#66D9EF guibg=#000000[J

line 110: [J

line 111: hi TabLineFill     guifg=#1B1D1E guibg=#1B1D1E[J

line 112: hi TabLine         guibg=#1B1D1E guifg=#808080 gui=none[J

line 113: [J

line 114: if s:molokai_original == 1[J

line 115:    hi Normal          guifg=#F8F8F2 guibg=#272822[J

line 116:    hi Comment         guifg=#75715E[J

line 117:    hi CursorLine                    guibg=#3E3D32[J

line 118:    hi CursorLineNr    guifg=#FD971F               gui=none[J

line 119:    hi CursorColumn                  guibg=#3E3D32[J

line 120:    hi ColorColumn                   guibg=#3B3A32[J

line 121:    hi LineNr          guifg=#BCBCBC guibg=#3B3A32[J

line 122:    hi NonText         guifg=#75715E[J

line 123:    hi SpecialKey      guifg=#75715E[J

line 124: else[J

line 125:    hi Normal          guifg=#F8F8F2 guibg=#1B1D1E[J

line 126:    hi Comment         guifg=#7E8E91[J

line 127:    hi CursorLine                    guibg=#293739[J

line 128:    hi CursorLineNr    guifg=#FD971F               gui=none[J

line 129:    hi CursorColumn                  guibg=#293739[J

line 130:    hi ColorColumn                   guibg=#232526[J

line 131:    hi LineNr          guifg=#465457 guibg=#232526[J

line 132:    hi NonText         guifg=#465457[J

line 133:    hi SpecialKey      guifg=#465457[J

line 134: end[J

line 135: [J

line 136: "[J

line 137: " Support for 256-color terminal[J

line 138: "[J

line 139: if &t_Co > 255[J

line 140:    if s:molokai_original == 1[J

line 141:       hi Normal                   ctermbg=234[J

line 142:       hi CursorLine               ctermbg=235   cterm=none[J

line 143:       hi CursorLineNr ctermfg=208               cterm=none[J

line 144:    else[J

line 145:       hi Normal       ctermfg=252 ctermbg=233[J

line 146:       hi CursorLine               ctermbg=234   cterm=none[J

line 147:       hi CursorLineNr ctermfg=208               cterm=none[J

line 148:    endif[J

line 149:    hi Boolean         ctermfg=135[J

line 150:    hi Character       ctermfg=144[J

line 151:    hi Number          ctermfg=135[J

line 152:    hi String          ctermfg=144[J

line 153:    hi Conditional     ctermfg=161               cterm=bold[J

line 154:    hi Constant        ctermfg=135               cterm=bold[J

line 155:    hi Cursor          ctermfg=16  ctermbg=253[J

line 156:    hi Debug           ctermfg=225               cterm=bold[J

line 157:    hi Define          ctermfg=81[J

line 158:    hi Delimiter       ctermfg=241[J

line 159: [J

line 160:    hi DiffAdd                     ctermbg=24[J

line 161:    hi DiffChange      ctermfg=181 ctermbg=239[J

line 162:    hi DiffDelete      ctermfg=162 ctermbg=53[J

line 163:    hi DiffText                    ctermbg=102 cterm=bold[J

line 164: [J

line 165:    hi Directory       ctermfg=118               cterm=bold[J

line 166:    hi Error           ctermfg=219 ctermbg=89[J

line 167:    hi ErrorMsg        ctermfg=199 ctermbg=16    cterm=bold[J

line 168:    hi Exception       ctermfg=118               cterm=bold[J

line 169:    hi Float           ctermfg=135[J

line 170:    hi FoldColumn      ctermfg=67  ctermbg=16[J

line 171:    hi Folded          ctermfg=67  ctermbg=16[J

line 172:    hi Function        ctermfg=118[J

line 173:    hi Identifier      ctermfg=208               cterm=none[J

line 174:    hi Ignore          ctermfg=244 ctermbg=232[J

line 175:    hi IncSearch       ctermfg=193 ctermbg=16[J

line 176: [J

line 177:    hi keyword         ctermfg=161               cterm=bold[J

line 178:    hi Label           ctermfg=229               cterm=none[J

line 179:    hi Macro           ctermfg=193[J

line 180:    hi SpecialKey      ctermfg=81[J

line 181: [J

line 182:    hi MatchParen      ctermfg=233  ctermbg=208 cterm=bold[J

line 183:    hi ModeMsg         ctermfg=229[J

line 184:    hi MoreMsg         ctermfg=229[J

line 185:    hi Operator        ctermfg=161[J

line 186: [J

line 187:    " complete menu[J

line 188:    hi Pmenu           ctermfg=81  ctermbg=16[J

line 189:    hi PmenuSel        ctermfg=255 ctermbg=242[J

line 190:    hi PmenuSbar                   ctermbg=232[J

line 191:    hi PmenuThumb      ctermfg=81[J

line 192: [J

line 193:    hi PreCondit       ctermfg=118               cterm=bold[J

line 194:    hi PreProc         ctermfg=118[J

line 195:    hi Question        ctermfg=81[J

line 196:    hi Repeat          ctermfg=161               cterm=bold[J

line 197:    hi Search          ctermfg=0   ctermbg=222   cterm=NONE[J

line 198: [J

line 199:    " marks column[J

line 200:    hi SignColumn      ctermfg=118 ctermbg=235[J

line 201:    hi SpecialChar     ctermfg=161               cterm=bold[J

line 202:    hi SpecialComment  ctermfg=245               cterm=bold[J

line 203:    hi Special         ctermfg=81[J

line 204:    if has("spell")[J

line 205:        hi SpellBad                ctermbg=52[J

line 206:        hi SpellCap                ctermbg=17[J

line 207:        hi SpellLocal              ctermbg=17[J

line 208:        hi SpellRare  ctermfg=none ctermbg=none  cterm=reverse[J

line 209:    endif[J

line 210:    hi Statement       ctermfg=161               cterm=bold[J

line 211:    hi StatusLine      ctermfg=238 ctermbg=253[J

line 212:    hi StatusLineNC    ctermfg=244 ctermbg=232[J

line 213:    hi StorageClass    ctermfg=208[J

line 214:    hi Structure       ctermfg=81[J

line 215:    hi Tag             ctermfg=161[J

line 216:    hi Title           ctermfg=166[J

line 217:    hi Todo            ctermfg=231 ctermbg=232   cterm=bold[J

line 218: [J

line 219:    hi Typedef         ctermfg=81[J

line 220:    hi Type            ctermfg=81                cterm=none[J

line 221:    hi Underlined      ctermfg=244               cterm=underline[J

line 222: [J

line 223:    hi VertSplit       ctermfg=244 ctermbg=232   cterm=bold[J

line 224:    hi VisualNOS                   ctermbg=238[J

line 225: " ctermbg=235[J

line 226:    hi Visual                      ctermbg=161[J

line 227:    hi WarningMsg      ctermfg=231 ctermbg=238   cterm=bold[J

line 228:    hi WildMenu        ctermfg=81  ctermbg=16[J

line 229: [J

line 230:    hi Comment         ctermfg=59[J

line 231:    hi CursorColumn                ctermbg=236[J

line 232:    hi ColorColumn                 ctermbg=236[J

line 233:    hi LineNr          ctermfg=250 ctermbg=236[J

line 234:    hi NonText         ctermfg=59[J

line 235: [J

line 236:    hi SpecialKey      ctermfg=59[J

line 237: [J

line 238:    if exists("g:rehash256") && g:rehash256 == 1[J

line 239:        hi Normal       ctermfg=252 ctermbg=234[J

line 240:        hi CursorLine               ctermbg=236   cterm=none[J

line 241:        hi CursorLineNr ctermfg=208               cterm=none[J

line 242: [J

line 243:        hi Boolean         ctermfg=141[J

line 244:        hi Character       ctermfg=222[J

line 245:        hi Number          ctermfg=141[J

line 246:        hi String          ctermfg=222[J

line 247:        hi Conditional     ctermfg=197               cterm=bold[J

line 248:        hi Constant        ctermfg=141               cterm=bold[J

line 249: [J

line 250:        hi DiffDelete      ctermfg=125 ctermbg=233[J

line 251: [J

line 252:        hi Directory       ctermfg=154               cterm=bold[J

line 253:        hi Error           ctermfg=222 ctermbg=233[J

line 254:        hi Exception       ctermfg=154               cterm=bold[J

line 255:        hi Float           ctermfg=141[J

line 256:        hi Function        ctermfg=154[J

line 257:        hi Identifier      ctermfg=208[J

line 258: [J

line 259:        hi Keyword         ctermfg=197               cterm=bold[J

line 260:        hi Operator        ctermfg=197[J

line 261:        hi PreCondit       ctermfg=154               cterm=bold[J

line 262:        hi PreProc         ctermfg=154[J

line 263:        hi Repeat          ctermfg=197               cterm=bold[J

line 264: [J

line 265:        hi Statement       ctermfg=197               cterm=bold[J

line 266:        hi Tag             ctermfg=197[J

line 267:        hi Title           ctermfg=203[J

line 268:        hi Visual                      ctermbg=238[J

line 269: [J

line 270:        hi Comment         ctermfg=244[J

line 271:        hi LineNr          ctermfg=239 ctermbg=235[J

line 272:        hi NonText         ctermfg=239[J

line 273:        hi SpecialKey      ctermfg=239[J

line 274:    endif[J

line 275: end[J

line 276: [J

line 277: " Must be at the end, because of ctermbg=234 bug.[J

line 278: " https://groups.google.com/forum/#!msg/vim_dev/afPqwAFNdrU/nqh6tOM87QUJ[J

line 279: set background=dark[J

finished sourcing /home/m/.vim/colors/molokai.vim[J
continuing in /usr/share/vim/vim90/syntax/synload.vim[J
line 20: else[J

line 21:   runtime! syntax/syncolor.vim[J

line 22: endif[J

line 23: [J

line 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 25: let s:cpo_save = &cpo[J

line 26: set cpo&vim[J

line 27: [J

line 28: " First remove all old syntax autocommands.[J

line 29: au! Syntax[J

line 30: [J

line 31: au Syntax *^I^Icall s:SynSet()[J

line 32: [J

line 33: fun! s:SynSet()[J

line 63: [J

line 64: [J

line 65: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)[J

line 66: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

line 71: [J

line 72: [J

line 73: " Source the user-specified syntax highlighting file[J

line 74: if exists("mysyntaxfile")[J

line 75:   let s:fname = expand(mysyntaxfile)[J

line 76:   if filereadable(s:fname)[J

line 77:     execute "source " . fnameescape(s:fname)[J

line 78:   endif[J

line 79: endif[J

line 80: [J

line 81: " Restore 'cpoptions'[J

line 82: let &cpo = s:cpo_save[J

line 83: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim90/syntax/synload.vim[J
continuing in /usr/share/vim/vim90/syntax/syntax.vim[J
line 20: [J

line 21: " Load the FileType autocommands if not done yet.[J

line 22: if exists("did_load_filetypes")[J

line 23:   let s:did_ft = 1[J

line 24: else[J

line 25:   filetype on[J

line 26:   let s:did_ft = 0[J

line 27: endif[J

line 28: [J

line 29: " Set up the connection between FileType and Syntax autocommands.[J

line 30: " This makes the syntax automatically set when the file type is detected.[J

line 31: " Avoid an error when 'verbose' is set and <amatch> expansion fails.[J

line 32: augroup syntaxset[J

line 33:   au! FileType *^I0verbose exe "set syntax=" . expand("<amatch>")[J

line 34: augroup END[J

line 35: [J

line 36: [J

line 37: " Execute the syntax autocommands for the each buffer.[J

line 38: " If the filetype wasn't detected yet, do that now.[J

line 39: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

line 40: " already was set manually (e.g., help buffers).[J

line 41: doautoall syntaxset FileType[J

Executing FileType Autocommands for "*"[J
autocommand 0verbose exe "set syntax=" . expand("<amatch>")[J

Executing: 0verbose exe "set syntax=" . expand("<amatch>")[J

line 42: if !s:did_ft[J

line 43:   doautoall filetypedetect BufRead[J

line 44: endif[J

finished sourcing /usr/share/vim/vim90/syntax/syntax.vim[J
continuing in /home/m/.vimrc[J
line 101: " Add numbers to each line on the left-hand side.[J

line 102: set number[J

line 103: " turn relative line numbers on[J

line 104: set relativenumber[J

line 105: " Highlight cursor line underneath the cursor horizontally.[J

line 106: set cursorline[J

line 107: " Highlight cursor line underneath the cursor vertically.[J

line 108: set cursorcolumn[J

line 109: " Set shift width to 4 spaces.[J

line 110: set shiftwidth=4[J

line 111: " Set tab width to 4 columns.[J

line 112: set tabstop=4[J

line 113: " Use space characters instead of tabs.[J

line 114: set expandtab[J

line 115: " Do not save backup files.[J

line 116: set nobackup[J

line 117: " Do not let cursor scroll below or above N number of lines when scrolling.[J

line 118: set scrolloff=16[J

line 119: " Incrementally highlight matching characters as you type.[J

line 120: set incsearch[J

line 121: " Ignore capital letters during search.[J

line 122: set ignorecase[J

line 123: " Override the ignorecase option if searching for capital letters.[J

line 124: " This will allow you to search specifically for capital letters.[J

line 125: set smartcase[J

line 126: " Show partial command you type in the last line of the screen.[J

line 127: set showcmd[J

line 128: " Show the mode you are on the last line.[J

line 129: set showmode[J

line 130: " Show matching words during a search.[J

line 131: set showmatch[J

line 132: " Use highlighting when doing a search.[J

line 133: set hlsearch[J

line 134: " Set the commands to save in history default number is 20.[J

line 135: set history=1000[J

line 136: " Enable auto completion menu after pressing TAB.[J

line 137: set wildmenu[J

line 138: " Make wildmenu behave like similar to Bash completion.[J

line 139: set wildmode=list:longest[J

line 140: " There are certain files that we would never want to edit with Vim.[J

line 141: " Wildmenu will ignore files with these extensions.[J

line 142: set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx[J

line 143: "------------------------------------------------------------------------------}}}[J

line 144: [J

line 145: [J

line 146: "--- movement ----------------{{{[J

line 147: " from Normal mode you can type q followed by enter to quit without saving[J

line 148: nnoremap q :q[J

line 149: " ctrl-q write and quit[J

line 150: " in normal, insert, visual and command mode.[J

line 151: nnoremap <c-q> :wq[J

line 152: inoremap <c-q> <ESC>:wq[J

line 153: vnoremap <c-q> <ESC>:wq[J

line 154: cnoremap <c-q> <ESC>:wq[J

line 155: [J

line 156: " toggle fold[J

line 157: nnoremap ff za[J

line 158: [J

line 159: " Ã¥ = go to end of line, 0=go to beginning of line.[J

line 160: nnoremap Ã¥ $:echo'Ã¥=go to end of line'<CR>[J

line 161: nnoremap 0 0:echo'0=go to start of line'<CR>[J

line 162: [J

line 163: nnoremap h h:echo'-- NORMAL --   h-left'<CR>[J

line 164: nnoremap j j:echo'-- NORMAL --   j-down'<CR>[J

line 165: nnoremap k k:echo'-- NORMAL --   k-up'<CR>[J

line 166: nnoremap l l:echo'-- NORMAL --   l-right'<CR>[J

line 167: [J

line 168: " speed up scrolling[J

line 169: nnoremap <C-e> 4<C-e>:echo 'scroll dwn'<CR>[J

line 170: nnoremap <C-y> 4<C-y>:echo 'scroll up'<CR>[J

line 171: "------------------------------------------}}}[J

line 172: [J

line 173: [J

line 174: "--- modify, undo, open, yank, delete, change, paste ----------------{{{[J

line 175: [J

line 176: nnoremap u u:echom"-- NORMAL -- u=undo last change"<cr>[J

line 177: [J

line 178: " U: Undo latest changes to one line. This command is unique because it will[J

line 179: " create a new entry instead of reverting back to an old entry. This means you[J

line 180: " can actually press u to undo the changes done with U.[J

line 181: [J

line 182: [J

line 183: nnoremap o o<esc>:echo'Normal o = Open line below'<cr>[J

line 184: nnoremap O O<esc>:echo'Normal O = Open line abowe'<cr>[J

line 185: [J

line 186: " Y,D,C = Yank, Delete, Change from cursor to the end of line.[J

line 187: nnoremap Y  y$:echo'Normal  Y=Yank from cursor to end of line'<CR>[J

line 188: nnoremap yw yw:echo'Normal yw=yank word'<cr>[J

line 189: nnoremap yy yy:echo'Normal yy=yank the whole line'<cr>[J

line 190: nnoremap yt yt[J

line 191: nnoremap yf yf[J

line 192: "NB! yt and yf can not have an echo statment after them.[J

line 193: [J

line 194: nnoremap D  d$:echo'Normal  D=Delete from cursor to end of line'<cr>[J

line 195: nnoremap dw dw:echo'Normal dw=delete word'<cr>[J

line 196: nnoremap dd dd:echo'Normal dd=delete line'<cr>[J

line 197: nnoremap df df[J

line 198: nnoremap dt dt[J

line 199: "NB! dt and df can not have an echo statment after them.[J

line 200: [J

line 201: " make cw behave like dw and yw[J

line 202: "nnoremap cw dwi[J

line 203: [J

line 204: nnoremap C c$[J

line 205: ":echo'C = change from cursor to end of line'<cr>[J

line 206: [J

line 207: " P = Paste, used after yank or delete [J

line 208: nnoremap P P:echo'P = Paste line abowe / Paste token at cursor'<cr>[J

line 209: nnoremap p p:echo'p = paste line below / paste token after cursor'<cr>[J

line 210: [J

line 211: " Shift-x insert space, only x delete one character.[J

line 212: nnoremap X i<space><esc>:echom"-- NORMAL -- X=shift-x=insert space"<cr>[J

line 213: nnoremap x x:echom"-- NORMAL -- x=delete one char"<cr>[J

line 214: [J

line 215: "h jh    h          kj  k[J

line 216: [J

line 217: " Space to type :!  to enter shell comands.[J

line 218: nnoremap <space> i<space><esc>:echom"-- NORMAL -- space=insert space"<cr> [J

line 219: nnoremap <tab> i<tab><esc>:echo"-- NORMAL -- tab=insert tab=4spaces"<cr>[J

line 220: "---------------------------------------------------------}}}    [J

line 221: [J

line 222: [J

line 223: "--- panes -------------------------------------{{{[J

line 224: "[J

line 225: let mapleader = ","[J

line 226: "[J

line 227: " ,vv for vertical split ,hh for horizonal split[J

line 228: nnoremap <Leader>vv :vs<CR>:edit ~/.vimrc<CR>[J

line 229: nnoremap <Leader>hh :sp<CR>: source ~/.vimrc<cr>[J

line 230: " ctrl-hjkl navigate panes[J

line 231: nnoremap <C-l> <C-w>l:echo 'nav pane right:' expand('%:p')<CR>[J

line 232: nnoremap <C-h> <C-w>h:echo 'nav pane left:' expand('%:p')<CR>[J

line 233: nnoremap <C-j> <C-w>j:echo 'nav pane dwn:' expand('%:p')<CR>[J

line 234: nnoremap <C-k> <C-w>k:echo 'nav pane up:' expand('%:p')<CR>[J

line 235: " Resize panes: SHIFT-L and SHIFT-H[J

line 236: nnoremap <S-L> 2<c-w><:echo 'Resize pane SHIFT-L=>'<CR>[J

line 237: nnoremap <S-H> 2<c-w>>:echo 'Resize pane SHIFT-H=<'<CR>[J

line 238: nnoremap <S-J> <c-w>+:echo 'Resize pane SHIFT-J=dwn'<CR>[J

line 239: nnoremap <S-K> <c-w>-:echo 'Resize pane SHIFT-K=up'<CR>[J

line 240: "[J

line 241: " move cursor in insert mode with shift hjkl[J

line 242: "inoremap <S-L> <ESC>lli[J

line 243: "inoremap <S-H> <ESC>i[J

line 244: "inoremap <S-J> <ESC>jli[J

line 245: "inoremap <S-K> <ESC>kli[J

line 246: "[J

line 247: "---------------------------------------------}}}[J

line 248: [J

line 249: [J

line 250: "--- C compilation using Makefile -------------{{{[J

line 251: " F2 F3 ...[J

line 252: nnoremap <F2> :!make help<CR>[J

line 253: nnoremap <F3> :!make vars<CR>[J

line 254: nnoremap <F4> :!make clean<CR>[J

line 255: nnoremap <F5> :!make<CR>[J

line 256: nnoremap <F6> :!make run<CR>[J

line 257: nnoremap <F7> :!make dbg<CR>[J

line 258: [J

line 259: " ,mh ,mv ...[J

line 260: nnoremap <Leader>mh :!make help<CR>[J

line 261: nnoremap <Leader>mv :!make vars<CR>[J

line 262: nnoremap <Leader>mc :!make clean<CR>[J

line 263: nnoremap <Leader>mm :!make all<CR>[J

line 264: nnoremap <Leader>mr :!make run<CR>[J

line 265: nnoremap <Leader>md :!make dbg<CR>[J

line 266: "-------------------------------------------}}}[J

line 267: [J

line 268: [J

line 269: "--- @ macros --------------------------------------------------------{{{[J

line 270: " @c comment C line  //[J

line 271: let @c="I// \<Esc>j"[J

line 272: [J

line 273: " @u uncomment C line[J

line 274: let @u = "I\<Del>\<Del>\<Del>\<Esc>j"[J

line 275: [J

line 276: " @p printf("[J

line 277: let @p = "Iprintf(\""[J

line 278: [J

line 279: " @f for(int i = 0; i < 10; i++){[J

line 280: let @f = "I\<TAB>for(int i = 0; i < 10; i++){\<esc>I\<tab>\<tab>"[J

line 281: "---------------------------------------------------------------------}}}[J

line 282: [J

line 283: [J

line 284: "--- search and replace ------------{{{[J

line 285: " ctrl-x search[J

line 286: nnoremap <C-x> :%s/[J

line 287: " ctrl-f find[J

line 288: nnoremap <C-f> /[J

line 289: "--------------------------------}}}[J

line 290: [J

line 291: [J

line 292: "--- edit dotfiles ---------------------{{{[J

line 293: " ,va ,vb ... edit dotfiles[J

line 294: let $ALIASES = '~/.bash_aliases'[J

line 295: let $BASHRC  = '~/.bashrc'[J

line 296: let $VIFMRC  = '~/.vifm/vifmrc.vim' [J

line 297: let $TMUX    = '~/.tmux.conf'[J

line 298: let $VIMRC   = '~/.vimrc'[J

line 299: [J

line 300: setlocal foldmethod=marker[J

line 301: nnoremap <Leader>ea :vs $ALIASES<CR>:setlocal foldmethod=marker<CR>:echo expand('%:p')<CR>[J

line 302: nnoremap <Leader>eb :vs $BASHRC <CR>:setlocal foldmethod=marker<CR>:echo expand('%:p')<CR>[J

line 303: nnoremap <Leader>ef :vs $VIFMRC <CR>:setlocal foldmethod=marker<CR>:echo expand('%:p')<CR>[J

line 304: nnoremap <Leader>et :vs $TMUX   <CR>:setlocal foldmethod=marker<CR>:echo expand('%:p')<CR>[J

line 305: nnoremap <Leader>ev :vs $VIMRC  <CR>:setlocal foldmethod=marker<CR>:echo expand('%:p')<CR>[J

line 306: "-------------------------------------}}}[J

line 307: [J

line 308: [J

line 309: "--- comments ---------------------{{{[J

line 310: " ,ch = leader comment hash[J

line 311: nnoremap <Leader>ch I#<ESC>j[J

line 312: " ,ca = leader comment apostrophe[J

line 313: nnoremap <Leader>ca I"<ESC>j[J

line 314: " ,cc = leader comment c source code[J

line 315: nnoremap <Leader>cc I//<ESC>j[J

line 316: "---------------------------------}}}[J

line 317: [J

line 318: [J

line 319: "--- Escape Save Source Quit ------------------------------------------------------{{{[J

line 320: "Ctrl-s saves the file and sources if it is $VIMRC[J

line 321: nnoremap <C-s> <esc>:w<cr>:source $VIMRC<cr>:echom"-- NORMAL -- ctrl-s=save"<cr>[J

line 322: inoremap <C-s> <esc>:w<cr>l:source $VIMRC<cr>:echom"-- NORMAL -- ctrl-s=save"<cr>[J

line 323: [J

line 324: set noesckeys[J

line 325: set ttimeout[J

line 326: set ttimeoutlen=1000[J

line 327: set timeoutlen=1000[J

line 328: [J

line 329: nnoremap <esc> <esc>:echo"-- NORMAL -- esc"<cr>[J

line 330: inoremap <esc> <esc>l:echo"-- NORMAL -- esc"<cr>[J

line 331: "----------------------------------------------------------------------------------}}}[J

line 332: [J

line 333: [J

line 334: "--- scripts autogroup autocmd ------------------------------{{{[J

line 335: " This will enable code folding.[J

line 336: " Use the marker method of folding.[J

line 337: "augroup filetype_vim[J

line 338:     "autocmd![J

line 339:     "autocmd FileType vim setlocal foldmethod=marker[J

line 340: "augroup END[J

line 341: [J

line 342: " Display cursorline and cursorcolumn ONLY in active window.[J

line 343: "augroup cursor_off[J

line 344:     "autocmd![J

line 345:     "autocmd WinLeave * set nocursorline nocursorcolumn[J

line 346:     "autocmd WinEnter * set cursorline cursorcolumn[J

line 347: "augroup END[J

line 348: "------------------------------------------------------------}}}[J

line 349: [J

line 350: [J

line 351: "--- plugins -----------------------{{{[J

line 352: "call plug#begin('~/.vim/plugged')[J

line 353: [J

line 354: "call plug#end()[J

line 355: "-----------------------------------}}}[J

line 356: [J

line 357: [J

line 358: "--- statusline -----------------------------------{{{[J

line 359: set laststatus=2[J

line 360: set statusline=[J

line 361: set statusline+=%F[J

line 362: set statusline+=%=[J

line 363: set statusline+=row:%l\ col:%c\ percent:%p%%[J

line 364: "--------------------------------------------------}}}[J

line 365: [J

line 366: [J

finished sourcing $HOME/.vimrc[J
Searching for "pack/*/start/*" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/pack/*/start/*"[J
chdir(/home/m/.vim)[J
fchdir() to previous dir[J
chdir(/home/m/.vim)[J
fchdir() to previous dir[J
Searching for "/usr/share/vim/vimfiles/pack/*/start/*"[J
Searching for "/usr/share/vim/vim90/pack/*/start/*"[J
Searching for "/usr/share/vim/vimfiles/after/pack/*/start/*"[J
Searching for "/home/m/.vim/after/pack/*/start/*"[J
Searching for "plugin/**/*.vim" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/plugin/**/*.vim"[J
Searching for "/usr/share/vim/vimfiles/plugin/**/*.vim"[J
Searching for "/usr/share/vim/vim90/plugin/**/*.vim"[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/getscriptPlugin.vim"[J
line 1: " ---------------------------------------------------------------------[J

line 2: " getscriptPlugin.vim[J

line 3: "  Author:^ICharles E. Campbell[J

line 4: "  Date:^INov 29, 2013[J

line 5: "  Installing:^I:help glvs-install[J

line 6: "  Usage:^I:help glvs[J

line 7: "[J

line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim[J

line 9: "[J

line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let[J

line 11: " all the peoples praise Him."[J

line 12: " ---------------------------------------------------------------------[J

line 13: " Initialization:^I{{{1[J

line 14: " if you're sourcing this file, surely you can't be[J

line 15: " expecting vim to be in its vi-compatible mode[J

line 16: if exists("g:loaded_getscriptPlugin")[J

line 17:  finish[J

line 18: endif[J

line 19: if &cp[J

line 20:  if &verbose[J

line 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"[J

line 22:  endif[J

line 23:  finish[J

line 24: endif[J

line 25: let g:loaded_getscriptPlugin = "v36"[J

line 26: let s:keepcpo                = &cpo[J

line 27: set cpo&vim[J

line 28: [J

line 29: " ---------------------------------------------------------------------[J

line 30: "  Public Interface: {{{1[J

line 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()[J

line 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()[J

line 33: sil! com    -nargs=0 GLVS                call getscript#GetLatestVimScripts()[J

line 34: [J

line 35: " ---------------------------------------------------------------------[J

line 36: " Restore Options: {{{1[J

line 37: let &cpo= s:keepcpo[J

line 38: unlet s:keepcpo[J

line 39: [J

line 40: " ---------------------------------------------------------------------[J

line 41: " vim: ts=8 sts=2 fdm=marker nowrap[J

finished sourcing /usr/share/vim/vim90/plugin/getscriptPlugin.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/gzip.vim"[J
line 1: " Vim plugin for editing compressed files.[J

line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2016 Oct 30[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of compressed files[J

line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_gzip = 1[J

line 13: [J

line 14: augroup gzip[J

line 15:   " Remove all gzip autocommands[J

line 16:   au![J

line 17: [J

line 18:   " Enable editing of gzipped files.[J

line 19:   " The functions are defined in autoload/gzip.vim.[J

line 20:   "[J

line 21:   " Set binary mode before reading the file.[J

line 22:   " Use "gzip -d", gunzip isn't always available.[J

line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin[J

line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")[J

line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")[J

line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")[J

line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")[J

line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")[J

line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")[J

line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")[J

line 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")[J

line 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")[J

line 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")[J

line 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")[J

line 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")[J

line 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")[J

line 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")[J

line 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")[J

line 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")[J

line 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")[J

line 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")[J

line 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")[J

line 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")[J

line 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")[J

line 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")[J

line 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")[J

line 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")[J

line 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")[J

line 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")[J

line 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")[J

line 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")[J

line 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")[J

line 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")[J

line 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")[J

line 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")[J

line 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")[J

line 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")[J

line 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")[J

line 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")[J

line 60: augroup END[J

finished sourcing /usr/share/vim/vim90/plugin/gzip.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/logiPat.vim"[J
line 1: " LogiPat: Boolean logical pattern matcher[J

line 2: "   Author:  Charles E. Campbell[J

line 3: "   Date:    Apr 04, 2016[J

line 4: "   Version: 4[J

line 5: "   Purpose: to do Boolean-logic based regular expression pattern matching[J

line 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like most anything else that's free,[J

line 10: "               LogiPat.vim is provided *as is* and comes with no warranty[J

line 11: "               of any kind, either expressed or implied. By using this[J

line 12: "               plugin, you agree that in no event will the copyright[J

line 13: "               holder be liable for any damages resulting from the use[J

line 14: "               of this software.[J

line 15: "[J

line 16: "   Usage: {{{1[J

line 17: "       :LogiPat ...[J

line 18: "[J

line 19: "         Boolean logic supported:[J

line 20: "            () grouping operators[J

line 21: "            !  not the following pattern[J

line 22: "            |  logical or[J

line 23: "            &  logical and[J

line 24: "            "..pattern.."[J

line 25: "^IExample: {{{1[J

line 26: "^I^I:LogiPat !("january"|"february")[J

line 27: "^I^I  would match all strings not containing the strings january[J

line 28: "^I^I  or february[J

line 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim[J

line 30: "[J

line 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1[J

line 32: "  and will call his name Jesus. He will be great, and will be[J

line 33: "  called the Son of the Most High. The Lord God will give him the[J

line 34: "  throne of his father, David, and he will reign over the house of[J

line 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)[J

line 36: [J

line 37: " ---------------------------------------------------------------------[J

line 38: " Load Once: {{{1[J

line 39: if &cp || exists("loaded_logiPat")[J

line 40:  finish[J

line 41: endif[J

line 42: let g:loaded_logiPat = "v4"[J

line 43: let s:keepcpo        = &cpo[J

line 44: set cpo&vim[J

line 45: "DechoRemOn[J

line 46: [J

line 47: " ---------------------------------------------------------------------[J

line 48: " Public Interface: {{{1[J

line 49: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)[J

line 50: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)[J

line 51: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")[J

line 52: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)[J

line 53: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"[J

line 54: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"[J

line 55: [J

line 56: " =====================================================================[J

line 57: " Functions: {{{1[J

line 58: [J

line 59: " ---------------------------------------------------------------------[J

line 60: " LogiPat: this function interprets the boolean-logic pattern {{{2[J

line 61: fun! LogiPat(pat,...)[J

line 146: [J

line 147: " ---------------------------------------------------------------------[J

line 148: " s:String: Vim6.4 doesn't have string() {{{2[J

line 149: func! s:String(str)[J

line 152: [J

line 153: " ---------------------------------------------------------------------[J

line 154: " LP_PatPush: {{{2[J

line 155: fun! s:LP_PatPush(pat)[J

line 162: [J

line 163: " ---------------------------------------------------------------------[J

line 164: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2[J

line 165: fun! s:LP_PatPop(lookup)[J

line 178: [J

line 179: " ---------------------------------------------------------------------[J

line 180: " LP_OpPush: {{{2[J

line 181: fun! s:LP_OpPush(op)[J

line 232: [J

line 233: " ---------------------------------------------------------------------[J

line 234: " LP_Execute: execute operators from opstack using pattern stack {{{2[J

line 235: fun! s:LP_Execute(preclvl)[J

line 265: [J

line 266: " ---------------------------------------------------------------------[J

line 267: " LP_Not: writes a logical-not for a pattern {{{2[J

line 268: fun! s:LP_Not(pat)[J

line 279: [J

line 280: " ---------------------------------------------------------------------[J

line 281: " LP_Or: writes a logical-or branch using two patterns {{{2[J

line 282: fun! s:LP_Or(pat1,pat2)[J

line 288: [J

line 289: " ---------------------------------------------------------------------[J

line 290: " LP_And: writes a logical-and concat using two patterns {{{2[J

line 291: fun! s:LP_And(pat1,pat2)[J

line 297: [J

line 298: " ---------------------------------------------------------------------[J

line 299: " StackLook: {{{2[J

line 300: fun! s:StackLook(description)[J

line 334: [J

line 335: " ---------------------------------------------------------------------[J

line 336: "  Cleanup And Modeline: {{{1[J

line 337: let &cpo= s:keepcpo[J

line 338: unlet s:keepcpo[J

line 339: " vim: ts=4 fdm=marker[J

finished sourcing /usr/share/vim/vim90/plugin/logiPat.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/manpager.vim"[J
line 1: " Vim plugin for using Vim as manpager.[J

line 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>[J

line 3: " Last Change: 2022 Oct 17[J

line 4: [J

line 5: if exists('g:loaded_manpager_plugin')[J

line 6:   finish[J

line 7: endif[J

line 8: let g:loaded_manpager_plugin = 1[J

line 9: [J

line 10: " Set up the current buffer (likely read from stdin) as a manpage[J

line 11: command MANPAGER call s:ManPager()[J

line 12: [J

line 13: function s:ManPager()[J

finished sourcing /usr/share/vim/vim90/plugin/manpager.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/matchparen.vim"[J
line 1: " Vim plugin for showing matching parens[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2022 Dec 01[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded (or disabled)[J

line 7: " - when 'compatible' is set[J

line 8: if exists("g:loaded_matchparen") || &cp[J

line 9:   finish[J

line 10: endif[J

line 11: let g:loaded_matchparen = 1[J

line 12: [J

line 13: if !exists("g:matchparen_timeout")[J

line 14:   let g:matchparen_timeout = 300[J

line 15: endif[J

line 16: if !exists("g:matchparen_insert_timeout")[J

line 17:   let g:matchparen_insert_timeout = 60[J

line 18: endif[J

line 19: [J

line 20: augroup matchparen[J

line 21:   " Replace all matchparen autocommands[J

line 22:   autocmd! CursorMoved,CursorMovedI,WinEnter,BufWinEnter,WinScrolled * call s:Highlight_Matching_Pair()[J

line 23:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()[J

line 24:   if exists('##TextChanged')[J

line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()[J

line 26:   endif[J

line 27: augroup END[J

line 28: [J

line 29: " Skip the rest if it was already done.[J

line 30: if exists("*s:Highlight_Matching_Pair")[J

line 31:   finish[J

line 32: endif[J

line 33: [J

line 34: let s:cpo_save = &cpo[J

line 35: set cpo-=C[J

line 36: [J

line 37: " The function that is invoked (very often) to define a ":match" highlighting[J

line 38: " for any matching paren.[J

line 39: func s:Highlight_Matching_Pair()[J

line 195: [J

line 196: func s:Remove_Matches()[J

line 202: [J

line 203: [J

line 204: " Define commands that will disable and enable the plugin.[J

line 205: command DoMatchParen call s:DoMatchParen()[J

line 206: command NoMatchParen call s:NoMatchParen()[J

line 207: [J

line 208: func s:NoMatchParen()[J

line 215: [J

line 216: func s:DoMatchParen()[J

line 222: [J

line 223: let &cpo = s:cpo_save[J

line 224: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim90/plugin/matchparen.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/netrwPlugin.vim"[J
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network[J

line 2: "            PLUGIN SECTION[J

line 3: " Date:^I^IFeb 09, 2021[J

line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>[J

line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim[J

line 6: " Copyright:    Copyright (C) 1999-2021 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided[J

line 11: "               *as is* and comes with no warranty of any kind, either[J

line 12: "               expressed or implied. By using this plugin, you agree that[J

line 13: "               in no event will the copyright holder be liable for any damages[J

line 14: "               resulting from the use of this software.[J

line 15: "[J

line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1[J

line 17: "  (James 1:22 RSV)[J

line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_netrwPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_netrwPlugin = "v171"[J

line 24: let s:keepcpo = &cpo[J

line 25: set cpo&vim[J

line 26: "DechoRemOn[J

line 27: [J

line 28: " ---------------------------------------------------------------------[J

line 29: " Public Interface: {{{1[J

line 30: [J

line 31: " Local Browsing Autocmds: {{{2[J

line 32: augroup FileExplorer[J

line 33:  au![J

line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif[J

line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))[J

line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))[J

line 37:  if has("win32") || has("win95") || has("win64") || has("win16")[J

line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))[J

line 39:  endif[J

line 40: augroup END[J

line 41: [J

line 42: " Network Browsing Reading Writing: {{{2[J

line 43: augroup Network[J

line 44:  au![J

line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))[J

line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))[J

line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))[J

line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))[J

line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))[J

line 50:  try[J

line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 52:  catch /^Vim\%((\a\+)\)\=:E216/[J

line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 54:  endtry[J

line 55: augroup END[J

line 56: [J

line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2[J

line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)[J

line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)[J

line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)[J

line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)[J

line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)[J

line 63: [J

line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2[J

line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)[J

line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)[J

line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)[J

line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)[J

line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)[J

line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)[J

line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)[J

line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)[J

line 73: [J

line 74: " Commands: NetrwSettings {{{2[J

line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()[J

line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)[J

line 77: [J

line 78: " Maps:[J

line 79: if !exists("g:netrw_nogx")[J

line 80:  if maparg('gx','n') == ""[J

line 81:   if !hasmapto('<Plug>NetrwBrowseX')[J

line 82:    nmap <unique> gx <Plug>NetrwBrowseX[J

line 83:   endif[J

line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>[J

line 85:  endif[J

line 86:  if maparg('gx','x') == ""[J

line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')[J

line 88:    xmap <unique> gx <Plug>NetrwBrowseXVis[J

line 89:   endif[J

line 90:   xno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>[J

line 91:  endif[J

line 92: endif[J

line 93: if exists("g:netrw_usetab") && g:netrw_usetab[J

line 94:  if maparg('<c-tab>','n') == ""[J

line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink[J

line 96:  endif[J

line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>[J

line 98: endif[J

line 99: [J

line 100: " ---------------------------------------------------------------------[J

line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2[J

line 102: fun! s:LocalBrowse(dirname)[J

line 146: [J

line 147: " ---------------------------------------------------------------------[J

line 148: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2[J

line 149: "             Its purpose: to look over all windows and run s:LocalBrowse() on[J

line 150: "             them, which checks if they're directories and will create a directory[J

line 151: "             listing when appropriate.[J

line 152: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()[J

line 153: "             has already been called.[J

line 154: fun! s:VimEnter(dirname)[J

line 174: [J

line 175: " ---------------------------------------------------------------------[J

line 176: " NetrwStatusLine: {{{1[J

line 177: fun! NetrwStatusLine()[J

line 188: [J

line 189: " ------------------------------------------------------------------------[J

line 190: " NetUserPass: set username and password for subsequent ftp transfer {{{1[J

line 191: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password[J

line 192: "^I    :call NetUserPass("uid")^I^I-- will prompt for password[J

line 193: "^I    :call NetUserPass("uid","password") -- sets global userid and password[J

line 194: fun! NetUserPass(...)[J

line 218: [J

line 219: " ------------------------------------------------------------------------[J

line 220: " Modelines And Restoration: {{{1[J

line 221: let &cpo= s:keepcpo[J

line 222: unlet s:keepcpo[J

line 223: " vim:ts=8 fdm=marker[J

finished sourcing /usr/share/vim/vim90/plugin/netrwPlugin.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/rrhelper.vim"[J
line 1: " Vim plugin with helper function(s) for --remote-wait[J

line 2: " Maintainer: Flemming Madsen <fma@cci.dk>[J

line 3: " Last Change: 2008 May 29[J

line 4: [J

line 5: " Has this already been loaded?[J

line 6: if exists("loaded_rrhelper") || !has("clientserver")[J

line 7:   finish[J

line 8: endif[J

line 9: let loaded_rrhelper = 1[J

line 10: [J

line 11: " Setup answers for a --remote-wait client who will assume[J

line 12: " a SetupRemoteReplies() function in the command server[J

line 13: [J

line 14: function SetupRemoteReplies()[J

line 41: [J

line 42: function DoRemoteReply(id, cnt, group, file)[J

line 47: [J

line 48: " vim: set sw=2 sts=2 :[J

finished sourcing /usr/share/vim/vim90/plugin/rrhelper.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/spellfile.vim"[J
line 1: " Vim plugin for downloading spell files[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2006 Feb 01[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of spell files[J

line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_spellfile_plugin = 1[J

line 13: [J

line 14: " The function is in the autoload directory.[J

line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))[J

finished sourcing /usr/share/vim/vim90/plugin/spellfile.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/tarPlugin.vim"[J
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles[J

line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>[J

line 3: " Modified by Charles E. Campbell[J

line 4: " Distributed under the GNU General Public License.[J

line 5: "[J

line 6: " Updates are available from <http://michael.toren.net/code/>.  If you[J

line 7: " find this script useful, or have suggestions for improvements, please[J

line 8: " let me know.[J

line 9: " Also look there for further comments and documentation.[J

line 10: "[J

line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.[J

line 12: " ---------------------------------------------------------------------[J

line 13: "  Load Once: {{{1[J

line 14: if &cp || exists("g:loaded_tarPlugin")[J

line 15:  finish[J

line 16: endif[J

line 17: let g:loaded_tarPlugin = "v32"[J

line 18: let s:keepcpo          = &cpo[J

line 19: set cpo&vim[J

line 20: [J

line 21: " ---------------------------------------------------------------------[J

line 22: "  Public Interface: {{{1[J

line 23: augroup tar[J

line 24:   au![J

line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)[J

line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)[J

line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 29: [J

line 30:   if has("unix")[J

line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)[J

line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)[J

line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 35:   endif[J

line 36: [J

line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))[J

line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))[J

line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))[J

line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))[J

line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))[J

line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))[J

line 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 49: augroup END[J

line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)[J

line 51: [J

line 52: " ---------------------------------------------------------------------[J

line 53: " Restoration And Modelines: {{{1[J

line 54: " vim: fdm=marker[J

line 55: let &cpo= s:keepcpo[J

line 56: unlet s:keepcpo[J

finished sourcing /usr/share/vim/vim90/plugin/tarPlugin.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/tohtml.vim"[J
line 1: " Vim plugin for converting a syntax highlighted file to HTML.[J

line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>[J

line 3: " Last Change: 2019 Nov 13[J

line 4: "[J

line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and[J

line 6: " $VIMRUNTIME/syntax/2html.vim[J

line 7: "[J

line 8: if exists('g:loaded_2html_plugin')[J

line 9:   finish[J

line 10: endif[J

line 11: let g:loaded_2html_plugin = 'vim8.1_v2'[J

line 12: [J

line 13: "[J

line 14: " Changelog: {{{[J

line 15: "   8.1_v2  (this version): - Fix Bitbucket issue #19: fix calculation of tab[J

line 16: "                             stop position to use in expanding a tab, when that[J

line 17: "                             tab occurs after a syntax match which in turn[J

line 18: "                             comes after previously expanded tabs.[J

line 19: "                           - Set eventignore while splitting a window for the[J

line 20: "                             destination file to ignore FileType events;[J

line 21: "                             speeds up processing when the destination file[J

line 22: "                             already exists and HTML highlight takes too long.[J

line 23: "                           - Fix Bitbucket issue #20: progress bar could not be[J

line 24: "                             seen when DiffDelete background color matched[J

line 25: "                             StatusLine background color. Added TOhtmlProgress[J

line 26: "                             highlight group for manual user override, but[J

line 27: "                             calculate it to be visible compared to StatusLine[J

line 28: "                             by default.[J

line 29: "                           - Fix Bitbucket issue #1: Remove workaround for old[J

line 30: "                             browsers which don't support 'ch' CSS unit, since[J

line 31: "                             all modern browsers, including IE>=9, support it.[J

line 32: "                           - Fix Bitbucket issue #10: support termguicolors[J

line 33: "                           - Fix Bitbucket issue #21: default to using[J

line 34: "                             generated content instead of <input> tags for[J

line 35: "                             uncopyable text, so that text is correctly[J

line 36: "                             prevented from being copied in chrome. Use[J

line 37: "                             g:html_use_input_for_pc option to control the[J

line 38: "                             method used.[J

line 39: "                           - Switch to HTML5 to allow using vnu as a validator[J

line 40: "                             in unit test.[J

line 41: "                           - Fix fallback sizing of <input> tags for browsers[J

line 42: "                             without "ch" support.[J

line 43: "                           - Fix cursor on unselectable diff filler text.[J

line 44: "   8.1_v1  (Vim 8.1.0528): - Fix Bitbucket issue #6: Don't generate empty[J

line 45: "                             script tag.[J

line 46: "                           - Fix Bitbucket issue #5: javascript should[J

line 47: "                             declare variables with "var".[J

line 48: "                           - Fix Bitbucket issue #13: errors thrown sourcing[J

line 49: "                             2html.vim directly when plugins not loaded.[J

line 50: "                           - Fix Bitbucket issue #16: support 'vartabstop'.[J

line 51: "[J

line 52: "   7.4 updates: {{{[J

line 53: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing[J

line 54: "                           an empty buffer. Jan Stocker: allow g:html_font to[J

line 55: "                           take a list so it is easier to specfiy fallback[J

line 56: "                           fonts in the generated CSS.[J

line 57: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and[J

line 58: "^I^I^I    also for version-specific modelines like "vim>703:".[J

line 59: "}}}[J

line 60: "[J

line 61: "   7.3 updates: {{{[J

line 62: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using[J

line 63: "^I^I^I    g:html_line_ids=0. Allow customizing[J

line 64: "^I^I^I    important IDs (like line IDs and fold IDs) using[J

line 65: "^I^I^I    g:html_id_expr evaluated when the buffer conversion[J

line 66: "^I^I^I    is started.[J

line 67: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and[J

line 68: "^I^I^I    insert modeline to set it to manual.[J

line 69: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a[J

line 70: "^I^I^I    duplicate of one buffer instead of including both.[J

line 71: "^I^I^I    Add anchors to each line so you can put '#L123'[J

line 72: "^I^I^I    or '#123' at the end of the URL to jump to line 123[J

line 73: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds[J

line 74: "^I^I^I    to show the anchor being jumped to if it is hidden.[J

line 75: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.[J

line 76: "^I^I^I    Allow TOhtml to chain together with other commands[J

line 77: "^I^I^I    using |.[J

line 78: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple[J

line 79: "^I^I^I    highlight groups make up the start-of-modeline text.[J

line 80: "^I^I^I    Improve render time of page with uncopyable regions[J

line 81: "^I^I^I    by not using one-input-per-char. Change name of[J

line 82: "^I^I^I    uncopyable option from html_unselectable to[J

line 83: "^I^I^I    html_prevent_copy. Added html_no_invalid option and[J

line 84: "^I^I^I    default to inserting invalid markup for uncopyable[J

line 85: "^I^I^I    regions to prevent MS Word from pasting undeletable[J

line 86: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).[J

line 87: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to[J

line 88: "^I^I^I    eliminate post-processing substitute commands in[J

line 89: "^I^I^I    favor of doing the work up front. Remove unnecessary[J

line 90: "^I^I^I    special treatment of 'LineNr' highlight group. Minor[J

line 91: "^I^I^I    speed improvements. Fix modeline mangling in[J

line 92: "^I^I^I    generated output so it works for text in the first[J

line 93: "^I^I^I    column. Fix missing line number and fold column in[J

line 94: "^I^I^I    diff filler lines. Fix that some fonts have a 1px[J

line 95: "^I^I^I    gap (using a dirty hack, improvements welcome). Add[J

line 96: "^I^I^I    "colorscheme" meta tag. Does NOT include support for[J

line 97: "^I^I^I    the new default foldtext added in v11, as the patch[J

line 98: "^I^I^I    adding it has not yet been included in Vim.[J

line 99: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian[J

line 100: "^I^I^I    Brabandt in[J

line 101: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.[J

line 102: "^I^I^I    This patch has not yet been included in Vim, thus[J

line 103: "^I^I^I    these changes are removed in the next version.[J

line 104: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside[J

line 105: "^I^I^I    multiple nested folds with dynamic folding on.[J

line 106: "^I^I^I    Also fix problem with foldtext in this situation.[J

line 107: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css[J

line 108: "^I^I^I    and without html_no_pre, default value same as[J

line 109: "^I^I^I    'wrap' option, (Andy Spencer). Don't use[J

line 110: "^I^I^I    'fileencoding' for converted document encoding if[J

line 111: "^I^I^I    'buftype' indicates a special buffer which isn't[J

line 112: "^I^I^I    written.[J

line 113: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab[J

line 114: "^I^I^I    characters in generated output (Andy Spencer).[J

line 115: "^I^I^I    Escape text that looks like a modeline so Vim[J

line 116: "^I^I^I    doesn't use anything in the converted HTML as a[J

line 117: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts[J

line 118: "^I^I^I    before the conversion range. Remove fold column when[J

line 119: "^I^I^I    there are no folds.[J

line 120: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:[J

line 121: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.[J

line 122: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not[J

line 123: "^I^I^I    supported by all major browsers according to[J

line 124: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and[J

line 125: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make[J

line 126: "^I^I^I    HTML encoding to Vim encoding detection be[J

line 127: "^I^I^I    case-insensitive for built-in pairs.[J

line 128: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be[J

line 129: "^I^I^I    called in restricted mode (Andy Spencer). Use[J

line 130: "^I^I^I    'fencoding' instead of 'encoding' to determine by[J

line 131: "^I^I^I    charset, and make sure the 'fenc' of the generated[J

line 132: "^I^I^I    file matches its indicated charset. Add charsets for[J

line 133: "^I^I^I    all of Vim's natively supported encodings.[J

line 134: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other[J

line 135: "^I^I^I    user settings interfering with diff mode generation,[J

line 136: "^I^I^I    trailing whitespace (e.g. line number column) when[J

line 137: "^I^I^I    using html_no_pre, and bugs when using[J

line 138: "^I^I^I    html_hover_unfold.[J

line 139: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync[J

line 140: "^I^I^I    folds in diff mode when first line was folded.[J

line 141: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode[J

line 142: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css[J

line 143: "^I^I^I    default to true when not set to anything. Use strict[J

line 144: "^I^I^I    doctypes where possible. Rename use_xhtml option to[J

line 145: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension[J

line 146: "^I^I^I    when using this option. Add meta tag for settings.[J

line 147: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the[J

line 148: "^I^I^I    diff colors and the normal syntax colors[J

line 149: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output[J

line 150: "}}}[J

line 151: "}}}[J

line 152: [J

line 153: " TODO: {{{[J

line 154: "   * Check the issue tracker:[J

line 155: "     https://bitbucket.org/fritzophrenic/vim-tohtml/issues?status=new&status=open[J

line 156: "   * Options for generating the CSS in external style sheets. New :TOcss[J

line 157: "     command to convert the current color scheme into a (mostly) generic CSS[J

line 158: "     stylesheet which can be re-used. Alternate stylesheet support? Good start[J

line 159: "     by Erik Falor[J

line 160: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).[J

line 161: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,[J

line 162: "     term) to use for the styling. Suggestion by "nacitar".[J

line 163: "   * Add way to override or specify which RGB colors map to the color numbers[J

line 164: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".[J

line 165: "   * Disable filetype detection until after all processing is done.[J

line 166: "   * Add option for not generating the hyperlink on stuff that looks like a[J

line 167: "     URL? Or just color the link to fit with the colorscheme (and only special[J

line 168: "     when hovering)?[J

line 169: "   * Bug: Opera does not allow printing more than one page if uncopyable[J

line 170: "     regions is turned on. Possible solution: Add normal text line numbers with[J

line 171: "     display:none, set to display:inline for print style sheets, and hide[J

line 172: "     <input> elements for print, to allow Opera printing multiple pages (and[J

line 173: "     other uncopyable areas?). May need to make the new text invisible to IE[J

line 174: "     with conditional comments to prevent copying it, IE for some reason likes[J

line 175: "     to copy hidden text. Other browsers too?[J

line 176: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is[J

line 177: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome[J

line 178: "     on Windows). Perhaps it is font related?[J

line 179: "   * Bug: still some gaps in the fold column when html_prevent_copy contains[J

line 180: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps[J

line 181: "     on diff lines though.[J

line 182: "   * Undercurl support via CSS3, with fallback to dotted or something:[J

line 183: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion[J

line 184: "   * Redo updates for modified default foldtext (v11) when/if the patch is[J

line 185: "     accepted to modify it.[J

line 186: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold[J

line 187: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress[J

line 188: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml[J

line 189: "     does not show the whole diff filler as it is supposed to?[J

line 190: "   * Bug: when 'isprint' is wrong for the current encoding, will generate[J

line 191: "     invalid content. Can/should anything be done about this? Maybe a separate[J

line 192: "     plugin to correct 'isprint' based on encoding?[J

line 193: "   * Check to see if the windows-125\d encodings actually work in Unix without[J

line 194: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.[J

line 195: "   * Font auto-detection similar to[J

line 196: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of[J

line 197: "     platforms.[J

line 198: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :[J

line 199: "^I- listchars support[J

line 200: "^I- full-line background highlight[J

line 201: "^I- other?[J

line 202: "   * Make it so deleted lines in a diff don't create side-scrolling (get it[J

line 203: "     free with full-line background highlight above).[J

line 204: "   * Restore open/closed folds and cursor position after processing each file[J

line 205: "     with option not to restore for speed increase.[J

line 206: "   * Add extra meta info (generation time, etc.)?[J

line 207: "   * Tidy up so we can use strict doctype in even more situations[J

line 208: "   * Implementation detail: add threshold for writing the lines to the html[J

line 209: "     buffer before we're done (5000 or so lines should do it)[J

line 210: "   * TODO comments for code cleanup scattered throughout[J

line 211: "}}}[J

line 212: [J

line 213: " Define the :TOhtml command when:[J

line 214: " - 'compatible' is not set[J

line 215: " - this plugin or user override was not already loaded[J

line 216: " - user commands are available. {{{[J

line 217: if !&cp && !exists(":TOhtml") && has("user_commands")[J

line 218:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)[J

line 219: endif "}}}[J

line 220: [J

line 221: " Make sure any patches will probably use consistent indent[J

line 222: "   vim: ts=8 sw=2 sts=2 noet fdm=marker[J

finished sourcing /usr/share/vim/vim90/plugin/tohtml.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/vimballPlugin.vim"[J
line 1: " vimballPlugin : construct a file containing both paths and files[J

line 2: " Author: Charles E. Campbell[J

line 3: " Copyright: (c) 2004-2014 by Charles E. Campbell[J

line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt[J

line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".[J

line 6: "            No warranty, express or implied.[J

line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***[J

line 8: "[J

line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who[J

line 10: "      judge. For in that which you judge another, you condemn yourself. For[J

line 11: "      you who judge practice the same things.[J

line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim[J

line 13: [J

line 14: " ---------------------------------------------------------------------[J

line 15: "  Load Once: {{{1[J

line 16: if &cp || exists("g:loaded_vimballPlugin")[J

line 17:  finish[J

line 18: endif[J

line 19: let g:loaded_vimballPlugin = "v37"[J

line 20: let s:keepcpo              = &cpo[J

line 21: set cpo&vim[J

line 22: [J

line 23: " ------------------------------------------------------------------------------[J

line 24: " Public Interface: {{{1[J

line 25: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)[J

line 26: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)[J

line 27: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)[J

line 28: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()[J

line 29: augroup Vimball[J

line 30:  au![J

line 31:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

line 32:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

line 33:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 34:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

line 35:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

line 36:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 37: augroup END[J

line 38: [J

line 39: " =====================================================================[J

line 40: " Restoration And Modelines: {{{1[J

line 41: " vim: fdm=marker[J

line 42: let &cpo= s:keepcpo[J

line 43: unlet s:keepcpo[J

finished sourcing /usr/share/vim/vim90/plugin/vimballPlugin.vim[J
chdir(/usr/share/vim/vim90/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim90/plugin/zipPlugin.vim"[J
line 1: " zipPlugin.vim: Handles browsing zipfiles[J

line 2: "            PLUGIN PORTION[J

line 3: " Date:^I^I^IJan 07, 2020[J

line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>[J

line 5: " License:^I^IVim License  (see vim's :help license)[J

line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty[J

line 11: "               of any kind, either expressed or implied. By using this[J

line 12: "               plugin, you agree that in no event will the copyright[J

line 13: "               holder be liable for any damages resulting from the use[J

line 14: "               of this software.[J

line 15: "[J

line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.[J

line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.[J

line 18: " ---------------------------------------------------------------------[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_zipPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_zipPlugin = "v32"[J

line 24: let s:keepcpo          = &cpo[J

line 25: set cpo&vim[J

line 26: [J

line 27: " ---------------------------------------------------------------------[J

line 28: " Options: {{{1[J

line 29: if !exists("g:zipPlugin_ext")[J

line 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'[J

line 31: endif[J

line 32: [J

line 33: " ---------------------------------------------------------------------[J

line 34: " Public Interface: {{{1[J

line 35: augroup zip[J

line 36:  au![J

line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)[J

line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)[J

line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 41: [J

line 42:  if has("unix")[J

line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)[J

line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)[J

line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 47:  endif[J

line 48: [J

line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'[J

line 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))[J

line 50: augroup END[J

line 51: [J

line 52: " ---------------------------------------------------------------------[J

line 53: "  Restoration And Modelines: {{{1[J

line 54: "  vim: fdm=marker[J

line 55: let &cpo= s:keepcpo[J

line 56: unlet s:keepcpo[J

finished sourcing /usr/share/vim/vim90/plugin/zipPlugin.vim[J
Searching for "pack/*/start/*" in "/home/m/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/pack/*/start/*"[J
chdir(/home/m/.vim/pack/themes/start)[J
fchdir() to previous dir[J
Executing: augroup filetypedetect[J

Executing: augroup END[J

Searching for "/usr/share/vim/vimfiles/pack/*/start/*"[J
Searching for "/usr/share/vim/vim90/pack/*/start/*"[J
Searching for "/usr/share/vim/vimfiles/after/pack/*/start/*"[J
Searching for "/home/m/.vim/after/pack/*/start/*"[J
Searching for "plugin/**/*.vim" in "/home/m/.vim,/home/m/.vim/pack/themes/start/dracula,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/home/m/.vim/pack/themes/start/dracula/after,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/pack/themes/start/dracula/after/plugin/**/*.vim"[J
chdir(/home/m/.vim/pack/themes/start/dracula/after/plugin)[J
fchdir() to previous dir[J
sourcing "/home/m/.vim/pack/themes/start/dracula/after/plugin/dracula.vim"[J
line 1: if dracula#should_abort()[J

Searching for "autoload/dracula.vim" in "/home/m/.vim,/home/m/.vim/pack/themes/start/dracula,/usr/share/vim/vimfiles,/usr/share/vim/vim90,/home/m/.vim/pack/themes/start/dracula/after,/usr/share/vim/vimfiles/after,/home/m/.vim/after"[J
Searching for "/home/m/.vim/autoload/dracula.vim"[J
Searching for "/home/m/.vim/pack/themes/start/dracula/autoload/dracula.vim"[J
chdir(/home/m/.vim/pack/themes/start/dracula/autoload)[J
fchdir() to previous dir[J
line 1: sourcing "/home/m/.vim/pack/themes/start/dracula/autoload/dracula.vim"[J
line 1: " Palette: {{{[J

line 2: [J

line 3: let g:dracula#palette           = {}[J

line 4: let g:dracula#palette.fg        = ['#F8F8F2', 253][J

line 5: [J

line 6: let g:dracula#palette.bglighter = ['#424450', 238][J

line 7: let g:dracula#palette.bglight   = ['#343746', 237][J

line 8: let g:dracula#palette.bg        = ['#282A36', 236][J

line 9: let g:dracula#palette.bgdark    = ['#21222C', 235][J

line 10: let g:dracula#palette.bgdarker  = ['#191A21', 234][J

line 11: [J

line 12: let g:dracula#palette.comment   = ['#6272A4',  61][J

line 13: let g:dracula#palette.selection = ['#44475A', 239][J

line 14: let g:dracula#palette.subtle    = ['#424450', 238][J

line 15: [J

line 16: let g:dracula#palette.cyan      = ['#8BE9FD', 117][J

line 17: let g:dracula#palette.green     = ['#50FA7B',  84][J

line 18: let g:dracula#palette.orange    = ['#FFB86C', 215][J

line 19: let g:dracula#palette.pink      = ['#FF79C6', 212][J

line 20: let g:dracula#palette.purple    = ['#BD93F9', 141][J

line 21: let g:dracula#palette.red       = ['#FF5555', 203][J

line 22: let g:dracula#palette.yellow    = ['#F1FA8C', 228][J

line 23: [J

line 24: "[J

line 25: " ANSI[J

line 26: "[J

line 27: let g:dracula#palette.color_0  = '#21222C'[J

line 28: let g:dracula#palette.color_1  = '#FF5555'[J

line 29: let g:dracula#palette.color_2  = '#50FA7B'[J

line 30: let g:dracula#palette.color_3  = '#F1FA8C'[J

line 31: let g:dracula#palette.color_4  = '#BD93F9'[J

line 32: let g:dracula#palette.color_5  = '#FF79C6'[J

line 33: let g:dracula#palette.color_6  = '#8BE9FD'[J

line 34: let g:dracula#palette.color_7  = '#F8F8F2'[J

line 35: let g:dracula#palette.color_8  = '#6272A4'[J

line 36: let g:dracula#palette.color_9  = '#FF6E6E'[J

line 37: let g:dracula#palette.color_10 = '#69FF94'[J

line 38: let g:dracula#palette.color_11 = '#FFFFA5'[J

line 39: let g:dracula#palette.color_12 = '#D6ACFF'[J

line 40: let g:dracula#palette.color_13 = '#FF92DF'[J

line 41: let g:dracula#palette.color_14 = '#A4FFFF'[J

line 42: let g:dracula#palette.color_15 = '#FFFFFF'[J

line 43: [J

line 44: " }}}[J

line 45: [J

line 46: " Helper function that takes a variadic list of filetypes as args and returns[J

line 47: " whether or not the execution of the ftplugin should be aborted.[J

line 48: func! dracula#should_abort(...)[J

line 56: [J

line 57: " vim: fdm=marker ts=2 sts=2 sw=2 fdl=0:[J

finished sourcing /home/m/.vim/pack/themes/start/dracula/autoload/dracula.vim[J
continuing in /home/m/.vim/pack/themes/start/dracula/after/plugin/dracula.vim[J
calling dracula#should_abort[J()

line 1:     if ! exists('g:colors_name') || g:colors_name !=# 'dracula'[J

line 2:         return 1[J

dracula#should_abort returning #1[J

continuing in /home/m/.vim/pack/themes/start/dracula/after/plugin/dracula.vim[J

line 2:   finish[J

finished sourcing /home/m/.vim/pack/themes/start/dracula/after/plugin/dracula.vim[J
Searching for "/usr/share/vim/vimfiles/after/plugin/**/*.vim"[J
Searching for "/home/m/.vim/after/plugin/**/*.vim"[J
Opening the X display took 10 msec[J
Reading viminfo file "/home/m/.viminfo" info oldfiles[JOpening the X display took 3 msec[J
Press ENTER or type command to continueXSMP handling save-yourself request[J[?25h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[1;77r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[38;5;252m[48;5;233m[H[2J[?25l[77;1HExecuting BufWinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
Executing: call s:Highlight_Matching_Pair()
calling <SNR>17_Highlight_Matching_Pair()
line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>17_Remove_Matches()
line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>17_Remove_Matches returning #0
continuing in <SNR>17_Highlight_Matching_Pair
line 3:
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9:
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14:
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:[7Clet before = strlen(c_before)
line 28:[7Clet c = c_before
line 29:[7Clet i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:[7C" not found, nothing to do
line 33:[7Creturn
<SNR>17_Highlight_Matching_Pair returning #0
continuing in BufWinEnter Autocommands for "*"
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))
Executing: sil call s:LocalBrowse(expand("<amatch>"))
Executing VimEnter Autocommands for "*"
[38;5;121mPress ENTER or type command to continue[?25h[m[38;5;252m[48;5;233m
[?25lautocommand sil call s:VimEnter(expand("<amatch>"))
[38;5;121mPress ENTER or type command to continue[?25h[m[38;5;252m[48;5;233m
[?25lExecuting: sil call s:VimEnter(expand("<amatch>"))
[38;5;121mPress ENTER or type command to continue[?25h[?25l[m[38;5;252m[48;5;233mExecuting CursorMoved Autocommands for "*"
[38;5;121mPress ENTER or type command to continue[?25h[m[38;5;252m[48;5;233m
[?25lautocommand call s:Highlight_Matching_Pair()
[38;5;121mPress ENTER or type command to continue[?25h[m[38;5;252m[48;5;233m
[?25lExecuting: call s:Highlight_Matching_Pair()
calling <SNR>17_Highlight_Matching_Pair()
line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling <SNR>17_Remove_Matches()
line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
<SNR>17_Remove_Matches returning #0
continuing in <SNR>17_Highlight_Matching_Pair
line 3:
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9:
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14:
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:[7Clet before = strlen(c_before)
line 28:[7Clet c = c_before
line 29:[7Clet i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:[7C" not found, nothing to do
line 33:[7Creturn
<SNR>17_Highlight_Matching_Pair returning #0
continuing in CursorMoved Autocommands for "*"
[27m[23m[29m[m[38;5;252m[48;5;233m[1;1H[38;5;208m1   [m[38;5;252m[48;5;233m[38;5;59m[48;5;234m$[m[38;5;252m[48;5;233m[48;5;234m                                                                                                  [m[38;5;252m[48;5;233m[2;1H[38;5;59m~                                                                                                      [3;1H~                                                                                                      [4;1H~                                                                                                      [5;1H~                                                                                                      [6;1H~                                                                                                      [7;1H~                                                                                                      [8;1H~                                                                                                      [9;1H~                                                                                                      [10;1H~                                                                                                      [11;1H~                                                                                                      [12;1H~                                                                                                      [13;1H~                                                                                                      [14;1H~                                                                                                      [15;1H~                                                                                                      [16;1H~                                                                                                      [17;1H~                                                                                                      [18;1H~                                                                                                      [19;1H~                                                                                                      [20;1H~                                                                                                      [21;1H~                                                                                                      [22;1H~                                                                                                      [23;1H~                                                                                                      [24;1H~                                                                                                      [25;1H~                                                                                                      [26;1H~                                                                                                      [27;1H~                                                                                                      [28;1H~                                                                                                      [29;1H~                                                                                                      [30;1H~                                                                                                      [31;1H~                                                                                                      [32;1H~                                                                                                      [33;1H~                                                                                                      [34;1H~                                                                                                      [35;1H~                                                                                                      [36;1H~                                                                                                      [37;1H~                                                                                                      [38;1H~                                                                                                      [39;1H~                                                                                                      [40;1H~                                                                                                      [41;1H~                                                                                                      [42;1H~                                                                                                      [43;1H~                                                                                                      [44;1H~                                                                                                      [45;1H~                                                                                                      [46;1H~                                                                                                      [47;1H~                                                                                                      [48;1H~                                                                                                      [49;1H~                                                                                                      [50;1H~                                                                                                      [51;1H~                                                                                                      [52;1H~                                                                                                      [53;1H~                                                                                                      [54;1H~                                                                                                      [55;1H~                                                                                                      [56;1H~                                                                                                      [57;1H~                                                                                                      [58;1H~                                                                                                      [59;1H~                                                                                                      [60;1H~                                                                                                      [61;1H~                                                                                                      [62;1H~                                                                                                      [63;1H~                                                                                                      [64;1H~                                                                                                      [65;1H~                                                                                                      [66;1H~                                                                                                      [67;1H~                                                                                                      [68;1H~                                                                                                      [69;1H~                                                                                                      [70;1H~                                                                                                      [71;1H~                                                                                                      [72;1H~                                                                                                      [73;1H~                                                                                                      [74;1H~                                                                                                      [75;1H~                                                                                                      [m[38;5;252m[48;5;233m[76;1H[1m[7m[38;5;238m[48;5;253m[No Name]                                                                      row:0 col:0 percent:100%[m[38;5;252m[48;5;233m[77;1H[K[33;44HVIM - Vi IMproved[35;44Hversion 9.0.1182[36;40Hby Bram Moolenaar et al.[37;31HVim is open source and freely distributable[39;38HHelp poor children in Uganda![40;29Htype  :help iccf[38;5;59m<Enter>[m[38;5;252m[48;5;233m       for information [42;29Htype  :q[38;5;59m<Enter>[m[38;5;252m[48;5;233m               to exit         [43;29Htype  :help[38;5;59m<Enter>[m[38;5;252m[48;5;233m  or  [38;5;59m<F1>[m[38;5;252m[48;5;233m  for on-line help[44;29Htype  :help version9[38;5;59m<Enter>[m[38;5;252m[48;5;233m   for version info]2;[No Name] - VIM]1;[No Name][1;5H[?25h[?4m[?25l[77;93H^M[1;5H[77;93H  [1;5H[?25h[?25l[77;1H:[1 qq[?25h[?25lExecuting: q
Writing viminfo file "/home/m/.viminfo"[?2004l[>4;m]2;m@arch:~]1;m@arch:~[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[39;49m[?2004l[?1l>[?1049l[23;0;0t[?25h[>4;m
